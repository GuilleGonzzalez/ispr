// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fir::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fir::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> fir::ap_ST_fsm_state1 = "1";
const sc_lv<6> fir::ap_ST_fsm_state2 = "10";
const sc_lv<6> fir::ap_ST_fsm_state3 = "100";
const sc_lv<6> fir::ap_ST_fsm_state4 = "1000";
const sc_lv<6> fir::ap_ST_fsm_state5 = "10000";
const sc_lv<6> fir::ap_ST_fsm_state6 = "100000";
const sc_lv<32> fir::ap_const_lv32_1 = "1";
const sc_lv<32> fir::ap_const_lv32_2 = "10";
const sc_lv<32> fir::ap_const_lv32_3 = "11";
const sc_lv<1> fir::ap_const_lv1_0 = "0";
const sc_lv<32> fir::ap_const_lv32_4 = "100";
const sc_lv<32> fir::ap_const_lv32_5 = "101";
const sc_lv<6> fir::ap_const_lv6_39 = "111001";
const sc_lv<1> fir::ap_const_lv1_1 = "1";
const sc_lv<32> fir::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<6> fir::ap_const_lv6_0 = "000000";
const sc_lv<6> fir::ap_const_lv6_3F = "111111";
const sc_lv<32> fir::ap_const_lv32_F = "1111";
const sc_lv<32> fir::ap_const_lv32_1E = "11110";
const sc_lv<26> fir::ap_const_lv26_3FFFE86 = "11111111111111111010000110";
const bool fir::ap_const_boolean_1 = true;

fir::fir(sc_module_name name) : sc_module(name), mVcdFile(0) {
    shift_reg_U = new fir_shift_reg("shift_reg_U");
    shift_reg_U->clk(ap_clk);
    shift_reg_U->reset(ap_rst);
    shift_reg_U->address0(shift_reg_address0);
    shift_reg_U->ce0(shift_reg_ce0);
    shift_reg_U->we0(shift_reg_we0);
    shift_reg_U->d0(shift_reg_d0);
    shift_reg_U->q0(shift_reg_q0);
    c_U = new fir_c("c_U");
    c_U->clk(ap_clk);
    c_U->reset(ap_rst);
    c_U->address0(c_address0);
    c_U->ce0(c_ce0);
    c_U->q0(c_q0);
    fir_mul_mul_16s_1bkb_U0 = new fir_mul_mul_16s_1bkb<1,1,16,10,26>("fir_mul_mul_16s_1bkb_U0");
    fir_mul_mul_16s_1bkb_U0->din0(shift_reg_q0);
    fir_mul_mul_16s_1bkb_U0->din1(acc_fu_173_p1);
    fir_mul_mul_16s_1bkb_U0->dout(acc_fu_173_p2);
    fir_mac_muladd_10cud_U1 = new fir_mac_muladd_10cud<1,1,10,16,31,31>("fir_mac_muladd_10cud_U1");
    fir_mac_muladd_10cud_U1->din0(grp_fu_179_p0);
    fir_mac_muladd_10cud_U1->din1(x);
    fir_mac_muladd_10cud_U1->din2(grp_fu_179_p2);
    fir_mac_muladd_10cud_U1->dout(grp_fu_179_p3);
    fir_mac_muladd_16dEe_U2 = new fir_mac_muladd_16dEe<1,1,16,16,37,37>("fir_mac_muladd_16dEe_U2");
    fir_mac_muladd_16dEe_U2->din0(c_load_reg_240);
    fir_mac_muladd_16dEe_U2->din1(shift_reg_load_1_reg_235);
    fir_mac_muladd_16dEe_U2->din2(acc1_reg_100);
    fir_mac_muladd_16dEe_U2->dout(grp_fu_188_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_acc_cast_fu_125_p1);
    sensitive << ( acc_reg_196 );

    SC_METHOD(thread_acc_fu_173_p1);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_c_address0);
    sensitive << ( i_cast1_fu_128_p1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_c_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_179_p0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_3_fu_133_p2 );

    SC_METHOD(thread_grp_fu_179_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_3_fu_133_p2 );
    sensitive << ( acc1_reg_100 );

    SC_METHOD(thread_i_1_cast_fu_145_p1);
    sensitive << ( i_1_fu_139_p2 );

    SC_METHOD(thread_i_1_fu_139_p2);
    sensitive << ( i_reg_110 );

    SC_METHOD(thread_i_cast1_fu_128_p1);
    sensitive << ( i_reg_110 );

    SC_METHOD(thread_shift_reg_address0);
    sensitive << ( i_cast1_reg_212 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_3_fu_133_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_1_cast_fu_145_p1 );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_shift_reg_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_3_fu_133_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_shift_reg_d0);
    sensitive << ( x );
    sensitive << ( shift_reg_q0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_3_fu_133_p2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_shift_reg_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_3_fu_133_p2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_3_fu_133_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_reg_110 );

    SC_METHOD(thread_y);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_3_fu_133_p2 );
    sensitive << ( grp_fu_179_p3 );

    SC_METHOD(thread_y_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_3_fu_133_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_3_fu_133_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, y, "(port)y");
    sc_trace(mVcdFile, y_ap_vld, "(port)y_ap_vld");
    sc_trace(mVcdFile, x, "(port)x");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, shift_reg_address0, "shift_reg_address0");
    sc_trace(mVcdFile, shift_reg_ce0, "shift_reg_ce0");
    sc_trace(mVcdFile, shift_reg_we0, "shift_reg_we0");
    sc_trace(mVcdFile, shift_reg_d0, "shift_reg_d0");
    sc_trace(mVcdFile, shift_reg_q0, "shift_reg_q0");
    sc_trace(mVcdFile, c_address0, "c_address0");
    sc_trace(mVcdFile, c_ce0, "c_ce0");
    sc_trace(mVcdFile, c_q0, "c_q0");
    sc_trace(mVcdFile, acc_fu_173_p2, "acc_fu_173_p2");
    sc_trace(mVcdFile, acc_reg_196, "acc_reg_196");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, acc_cast_fu_125_p1, "acc_cast_fu_125_p1");
    sc_trace(mVcdFile, i_cast1_fu_128_p1, "i_cast1_fu_128_p1");
    sc_trace(mVcdFile, i_cast1_reg_212, "i_cast1_reg_212");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_1_fu_139_p2, "i_1_fu_139_p2");
    sc_trace(mVcdFile, i_1_reg_220, "i_1_reg_220");
    sc_trace(mVcdFile, tmp_3_fu_133_p2, "tmp_3_fu_133_p2");
    sc_trace(mVcdFile, shift_reg_load_1_reg_235, "shift_reg_load_1_reg_235");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, c_load_reg_240, "c_load_reg_240");
    sc_trace(mVcdFile, grp_fu_188_p3, "grp_fu_188_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, acc1_reg_100, "acc1_reg_100");
    sc_trace(mVcdFile, i_reg_110, "i_reg_110");
    sc_trace(mVcdFile, i_1_cast_fu_145_p1, "i_1_cast_fu_145_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_179_p3, "grp_fu_179_p3");
    sc_trace(mVcdFile, acc_fu_173_p1, "acc_fu_173_p1");
    sc_trace(mVcdFile, grp_fu_179_p0, "grp_fu_179_p0");
    sc_trace(mVcdFile, grp_fu_179_p2, "grp_fu_179_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fir.hdltvin.dat");
    mHdltvoutHandle.open("fir.hdltvout.dat");
}

fir::~fir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete shift_reg_U;
    delete c_U;
    delete fir_mul_mul_16s_1bkb_U0;
    delete fir_mac_muladd_10cud_U1;
    delete fir_mac_muladd_16dEe_U2;
}

void fir::thread_ap_clk_no_reset_() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        acc1_reg_100 = grp_fu_188_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        acc1_reg_100 = acc_cast_fu_125_p1.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_reg_110 = i_1_reg_220.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_110 = ap_const_lv6_39;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        acc_reg_196 = acc_fu_173_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        c_load_reg_240 = c_q0.read();
        shift_reg_load_1_reg_235 = shift_reg_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(tmp_3_fu_133_p2.read(), ap_const_lv1_0))) {
        i_1_reg_220 = i_1_fu_139_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_cast1_reg_212 = i_cast1_fu_128_p1.read();
    }
}

void fir::thread_acc_cast_fu_125_p1() {
    acc_cast_fu_125_p1 = esl_sext<37,26>(acc_reg_196.read());
}

void fir::thread_acc_fu_173_p1() {
    acc_fu_173_p1 =  (sc_lv<10>) (ap_const_lv26_3FFFE86);
}

void fir::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fir::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fir::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fir::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fir::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void fir::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void fir::thread_c_address0() {
    c_address0 =  (sc_lv<6>) (i_cast1_fu_128_p1.read());
}

void fir::thread_c_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        c_ce0 = ap_const_logic_1;
    } else {
        c_ce0 = ap_const_logic_0;
    }
}

void fir::thread_grp_fu_179_p0() {
    grp_fu_179_p0 =  (sc_lv<10>) (ap_const_lv26_3FFFE86);
}

void fir::thread_grp_fu_179_p2() {
    grp_fu_179_p2 = acc1_reg_100.read().range(31-1, 0);
}

void fir::thread_i_1_cast_fu_145_p1() {
    i_1_cast_fu_145_p1 = esl_zext<32,6>(i_1_fu_139_p2.read());
}

void fir::thread_i_1_fu_139_p2() {
    i_1_fu_139_p2 = (!i_reg_110.read().is_01() || !ap_const_lv6_3F.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_110.read()) + sc_bigint<6>(ap_const_lv6_3F));
}

void fir::thread_i_cast1_fu_128_p1() {
    i_cast1_fu_128_p1 = esl_zext<32,6>(i_reg_110.read());
}

void fir::thread_shift_reg_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        shift_reg_address0 =  (sc_lv<6>) (i_cast1_reg_212.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(tmp_3_fu_133_p2.read(), ap_const_lv1_1))) {
        shift_reg_address0 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(tmp_3_fu_133_p2.read(), ap_const_lv1_0))) {
        shift_reg_address0 =  (sc_lv<6>) (i_1_cast_fu_145_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        shift_reg_address0 = ap_const_lv6_39;
    } else {
        shift_reg_address0 = "XXXXXX";
    }
}

void fir::thread_shift_reg_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(tmp_3_fu_133_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(tmp_3_fu_133_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        shift_reg_ce0 = ap_const_logic_1;
    } else {
        shift_reg_ce0 = ap_const_logic_0;
    }
}

void fir::thread_shift_reg_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        shift_reg_d0 = shift_reg_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(tmp_3_fu_133_p2.read(), ap_const_lv1_1))) {
        shift_reg_d0 = x.read();
    } else {
        shift_reg_d0 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void fir::thread_shift_reg_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(tmp_3_fu_133_p2.read(), ap_const_lv1_1)))) {
        shift_reg_we0 = ap_const_logic_1;
    } else {
        shift_reg_we0 = ap_const_logic_0;
    }
}

void fir::thread_tmp_3_fu_133_p2() {
    tmp_3_fu_133_p2 = (!i_reg_110.read().is_01() || !ap_const_lv6_0.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_110.read() == ap_const_lv6_0);
}

void fir::thread_y() {
    y = grp_fu_179_p3.read().range(30, 15);
}

void fir::thread_y_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(tmp_3_fu_133_p2.read(), ap_const_lv1_1))) {
        y_ap_vld = ap_const_logic_1;
    } else {
        y_ap_vld = ap_const_logic_0;
    }
}

void fir::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(tmp_3_fu_133_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

void fir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"y\" :  \"" << y.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_ap_vld\" :  \"" << y_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x\" :  \"" << x.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

