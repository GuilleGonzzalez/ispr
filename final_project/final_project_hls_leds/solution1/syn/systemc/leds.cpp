// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "leds.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic leds::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic leds::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> leds::ap_ST_fsm_state1 = "1";
const sc_lv<3> leds::ap_ST_fsm_state2 = "10";
const sc_lv<3> leds::ap_ST_fsm_state3 = "100";
const sc_lv<32> leds::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> leds::ap_const_lv32_1 = "1";
const sc_lv<1> leds::ap_const_lv1_0 = "0";
const sc_lv<32> leds::ap_const_lv32_2 = "10";
const sc_lv<10> leds::ap_const_lv10_1 = "1";
const sc_lv<4> leds::ap_const_lv4_0 = "0000";
const sc_lv<7> leds::ap_const_lv7_0 = "0000000";
const sc_lv<1> leds::ap_const_lv1_1 = "1";
const sc_lv<3> leds::ap_const_lv3_0 = "000";
const sc_lv<32> leds::ap_const_lv32_3 = "11";
const sc_lv<32> leds::ap_const_lv32_6 = "110";
const sc_lv<4> leds::ap_const_lv4_1 = "1";
const sc_lv<3> leds::ap_const_lv3_1 = "1";
const sc_lv<7> leds::ap_const_lv7_1 = "1";
const bool leds::ap_const_boolean_1 = true;

leds::leds(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_col_V);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_172_p2 );
    sensitive << ( p_s_reg_94 );

    SC_METHOD(thread_exitcond1_fu_155_p2);
    sensitive << ( p_Result_1_reg_200 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_107 );

    SC_METHOD(thread_exitcond_fu_172_p2);
    sensitive << ( tmp_reg_195 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_1_reg_130 );

    SC_METHOD(thread_i_2_fu_160_p2);
    sensitive << ( i_reg_107 );

    SC_METHOD(thread_i_3_fu_177_p2);
    sensitive << ( i_1_reg_130 );

    SC_METHOD(thread_in_V_V_blk_n);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_in_V_V_read);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_out_col_V_fu_166_p2);
    sensitive << ( p_s_reg_94 );

    SC_METHOD(thread_out_row_V_fu_189_p2);
    sensitive << ( p_1_reg_118 );
    sensitive << ( r_V_fu_183_p2 );

    SC_METHOD(thread_r_V_fu_183_p2);
    sensitive << ( p_1_reg_118 );

    SC_METHOD(thread_row_V);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_172_p2 );
    sensitive << ( p_1_reg_118 );

    SC_METHOD(thread_tmp_fu_141_p1);
    sensitive << ( in_V_V_dout );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_155_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_172_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "leds_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, row_V, "(port)row_V");
    sc_trace(mVcdFile, col_V, "(port)col_V");
    sc_trace(mVcdFile, in_V_V_dout, "(port)in_V_V_dout");
    sc_trace(mVcdFile, in_V_V_empty_n, "(port)in_V_V_empty_n");
    sc_trace(mVcdFile, in_V_V_read, "(port)in_V_V_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, in_V_V_blk_n, "in_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_fu_141_p1, "tmp_fu_141_p1");
    sc_trace(mVcdFile, tmp_reg_195, "tmp_reg_195");
    sc_trace(mVcdFile, p_Result_1_reg_200, "p_Result_1_reg_200");
    sc_trace(mVcdFile, i_2_fu_160_p2, "i_2_fu_160_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, out_col_V_fu_166_p2, "out_col_V_fu_166_p2");
    sc_trace(mVcdFile, exitcond1_fu_155_p2, "exitcond1_fu_155_p2");
    sc_trace(mVcdFile, i_3_fu_177_p2, "i_3_fu_177_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, out_row_V_fu_189_p2, "out_row_V_fu_189_p2");
    sc_trace(mVcdFile, exitcond_fu_172_p2, "exitcond_fu_172_p2");
    sc_trace(mVcdFile, p_s_reg_94, "p_s_reg_94");
    sc_trace(mVcdFile, i_reg_107, "i_reg_107");
    sc_trace(mVcdFile, p_1_reg_118, "p_1_reg_118");
    sc_trace(mVcdFile, i_1_reg_130, "i_1_reg_130");
    sc_trace(mVcdFile, r_V_fu_183_p2, "r_V_fu_183_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("leds.hdltvin.dat");
    mHdltvoutHandle.open("leds.hdltvout.dat");
}

leds::~leds() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void leds::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_155_p2.read(), ap_const_lv1_1))) {
        i_1_reg_130 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_172_p2.read()))) {
        i_1_reg_130 = i_3_fu_177_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_155_p2.read(), ap_const_lv1_0))) {
        i_reg_107 = i_2_fu_160_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(in_V_V_empty_n.read(), ap_const_logic_1))) {
        i_reg_107 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_155_p2.read(), ap_const_lv1_1))) {
        p_1_reg_118 = ap_const_lv7_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_172_p2.read()))) {
        p_1_reg_118 = out_row_V_fu_189_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_155_p2.read(), ap_const_lv1_0))) {
        p_s_reg_94 = out_col_V_fu_166_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(in_V_V_empty_n.read(), ap_const_logic_1))) {
        p_s_reg_94 = ap_const_lv10_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(in_V_V_empty_n.read(), ap_const_logic_1))) {
        p_Result_1_reg_200 = in_V_V_dout.read().range(6, 3);
        tmp_reg_195 = tmp_fu_141_p1.read();
    }
}

void leds::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void leds::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void leds::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void leds::thread_col_V() {
    col_V = p_s_reg_94.read();
}

void leds::thread_exitcond1_fu_155_p2() {
    exitcond1_fu_155_p2 = (!i_reg_107.read().is_01() || !p_Result_1_reg_200.read().is_01())? sc_lv<1>(): sc_lv<1>(i_reg_107.read() == p_Result_1_reg_200.read());
}

void leds::thread_exitcond_fu_172_p2() {
    exitcond_fu_172_p2 = (!i_1_reg_130.read().is_01() || !tmp_reg_195.read().is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_130.read() == tmp_reg_195.read());
}

void leds::thread_i_2_fu_160_p2() {
    i_2_fu_160_p2 = (!i_reg_107.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_107.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void leds::thread_i_3_fu_177_p2() {
    i_3_fu_177_p2 = (!i_1_reg_130.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_1_reg_130.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void leds::thread_in_V_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        in_V_V_blk_n = in_V_V_empty_n.read();
    } else {
        in_V_V_blk_n = ap_const_logic_1;
    }
}

void leds::thread_in_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(in_V_V_empty_n.read(), ap_const_logic_1))) {
        in_V_V_read = ap_const_logic_1;
    } else {
        in_V_V_read = ap_const_logic_0;
    }
}

void leds::thread_out_col_V_fu_166_p2() {
    out_col_V_fu_166_p2 = (!ap_const_lv10_1.is_01())? sc_lv<10>(): p_s_reg_94.read() << (unsigned short)ap_const_lv10_1.to_uint();
}

void leds::thread_out_row_V_fu_189_p2() {
    out_row_V_fu_189_p2 = (r_V_fu_183_p2.read() | p_1_reg_118.read());
}

void leds::thread_r_V_fu_183_p2() {
    r_V_fu_183_p2 = (!ap_const_lv7_1.is_01())? sc_lv<7>(): p_1_reg_118.read() << (unsigned short)ap_const_lv7_1.to_uint();
}

void leds::thread_row_V() {
    row_V = p_1_reg_118.read();
}

void leds::thread_tmp_fu_141_p1() {
    tmp_fu_141_p1 = in_V_V_dout.read().range(3-1, 0);
}

void leds::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(in_V_V_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_155_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_172_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void leds::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"row_V\" :  \"" << row_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"col_V\" :  \"" << col_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_V_V_dout\" :  \"" << in_V_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_V_V_empty_n\" :  \"" << in_V_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_V_V_read\" :  \"" << in_V_V_read.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

