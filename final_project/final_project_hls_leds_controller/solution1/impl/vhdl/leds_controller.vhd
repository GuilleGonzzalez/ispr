-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity leds_controller is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (15 downto 0);
    col_V : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of leds_controller is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "leds_controller,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.462000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=561,HLS_SYN_LUT=336}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv42_1A36E3 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000110100011011011100011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_1_tr_fu_99_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_tr_reg_201 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_7_reg_206 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_3_fu_122_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_3_reg_217 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_9_reg_222 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_155_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_5_reg_227 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal neg_ti_fu_165_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal neg_ti_reg_232 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_fu_87_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_1_cast_fu_95_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_fu_83_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_116_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_116_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal neg_mul_fu_136_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_8_fu_141_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_151_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_6_fu_158_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_2_fu_171_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_11_fu_180_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_176_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_s_fu_188_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component leds_controller_mbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;



begin
    leds_controller_mbkb_U0 : component leds_controller_mbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 22,
        din1_WIDTH => 20,
        dout_WIDTH => 42)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_116_p0,
        din1 => tmp_1_tr_reg_201,
        ce => ap_const_logic_1,
        dout => grp_fu_116_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_reg_206 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                neg_ti_reg_232 <= neg_ti_fu_165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_1_tr_reg_201 <= tmp_1_tr_fu_99_p2;
                tmp_7_reg_206 <= tmp_1_tr_fu_99_p2(19 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_7_reg_206 = ap_const_lv1_1))) then
                tmp_3_reg_217 <= tmp_3_fu_122_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_5_reg_227 <= tmp_5_fu_155_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_9_reg_222 <= grp_fu_116_p2(41 downto 35);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (out_V_V_full_n, ap_CS_fsm, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (out_V_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    grp_fu_116_p0 <= ap_const_lv42_1A36E3(22 - 1 downto 0);
    neg_mul_fu_136_p2 <= std_logic_vector(unsigned(ap_const_lv40_0) - unsigned(tmp_3_reg_217));
    neg_ti_fu_165_p2 <= std_logic_vector(unsigned(ap_const_lv20_0) - unsigned(tmp_6_fu_158_p3));

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_fu_188_p3),7));

    out_V_V_write_assign_proc : process(out_V_V_full_n, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (out_V_V_full_n = ap_const_logic_1))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_s_fu_188_p3 <= 
        ap_const_lv2_0 when (tmp_11_fu_180_p3(0) = '1') else 
        tmp_10_fu_176_p1;
    tmp_10_fu_176_p1 <= tmp_2_fu_171_p3(2 - 1 downto 0);
    tmp_11_fu_180_p3 <= tmp_2_fu_171_p3(2 downto 2);
        tmp_1_cast_fu_95_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_87_p3),20));

    tmp_1_fu_87_p3 <= (x & ap_const_lv3_0);
    tmp_1_tr_fu_99_p2 <= std_logic_vector(signed(tmp_1_cast_fu_95_p1) - signed(tmp_fu_83_p1));
    tmp_2_fu_171_p3 <= 
        neg_ti_reg_232 when (tmp_7_reg_206(0) = '1') else 
        tmp_5_reg_227;
    tmp_3_fu_122_p1 <= grp_fu_116_p2(40 - 1 downto 0);
        tmp_4_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_141_p4),20));

        tmp_5_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_reg_222),20));

    tmp_6_fu_158_p3 <= 
        tmp_4_fu_151_p1 when (tmp_7_reg_206(0) = '1') else 
        tmp_5_fu_155_p1;
    tmp_8_fu_141_p4 <= neg_mul_fu_136_p2(39 downto 35);
        tmp_fu_83_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x),20));

end behav;
