// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="leds_controller,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.462000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=561,HLS_SYN_LUT=336}" *)

module leds_controller (
        ap_clk,
        ap_rst,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write,
        x,
        col_V
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
output  [6:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;
input  [15:0] x;
input  [3:0] col_V;

reg out_V_V_write;

reg    out_V_V_blk_n;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state7;
wire   [19:0] tmp_1_tr_fu_99_p2;
reg  signed [19:0] tmp_1_tr_reg_201;
wire    ap_CS_fsm_state1;
reg   [0:0] tmp_7_reg_206;
wire    ap_CS_fsm_state2;
wire   [39:0] tmp_3_fu_122_p1;
reg   [39:0] tmp_3_reg_217;
wire    ap_CS_fsm_state5;
reg   [6:0] tmp_9_reg_222;
wire  signed [19:0] tmp_5_fu_155_p1;
reg  signed [19:0] tmp_5_reg_227;
wire    ap_CS_fsm_state6;
wire   [19:0] neg_ti_fu_165_p2;
reg   [19:0] neg_ti_reg_232;
wire   [18:0] tmp_1_fu_87_p3;
wire  signed [19:0] tmp_1_cast_fu_95_p1;
wire  signed [19:0] tmp_fu_83_p1;
wire   [21:0] grp_fu_116_p0;
wire   [41:0] grp_fu_116_p2;
wire   [39:0] neg_mul_fu_136_p2;
wire   [4:0] tmp_8_fu_141_p4;
wire  signed [19:0] tmp_4_fu_151_p1;
wire   [19:0] tmp_6_fu_158_p3;
wire   [19:0] tmp_2_fu_171_p3;
wire   [0:0] tmp_11_fu_180_p3;
wire   [1:0] tmp_10_fu_176_p1;
wire   [1:0] p_s_fu_188_p3;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

leds_controller_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 22 ),
    .din1_WIDTH( 20 ),
    .dout_WIDTH( 42 ))
leds_controller_mbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_116_p0),
    .din1(tmp_1_tr_reg_201),
    .ce(1'b1),
    .dout(grp_fu_116_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_reg_206 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        neg_ti_reg_232 <= neg_ti_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_1_tr_reg_201 <= tmp_1_tr_fu_99_p2;
        tmp_7_reg_206 <= tmp_1_tr_fu_99_p2[32'd19];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_7_reg_206 == 1'd1))) begin
        tmp_3_reg_217 <= tmp_3_fu_122_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_5_reg_227 <= tmp_5_fu_155_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_9_reg_222 <= {{grp_fu_116_p2[41:35]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (out_V_V_full_n == 1'b1))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (out_V_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign grp_fu_116_p0 = 42'd1717987;

assign neg_mul_fu_136_p2 = (40'd0 - tmp_3_reg_217);

assign neg_ti_fu_165_p2 = (20'd0 - tmp_6_fu_158_p3);

assign out_V_V_din = p_s_fu_188_p3;

assign p_s_fu_188_p3 = ((tmp_11_fu_180_p3[0:0] === 1'b1) ? 2'd0 : tmp_10_fu_176_p1);

assign tmp_10_fu_176_p1 = tmp_2_fu_171_p3[1:0];

assign tmp_11_fu_180_p3 = tmp_2_fu_171_p3[32'd2];

assign tmp_1_cast_fu_95_p1 = $signed(tmp_1_fu_87_p3);

assign tmp_1_fu_87_p3 = {{x}, {3'd0}};

assign tmp_1_tr_fu_99_p2 = ($signed(tmp_1_cast_fu_95_p1) - $signed(tmp_fu_83_p1));

assign tmp_2_fu_171_p3 = ((tmp_7_reg_206[0:0] === 1'b1) ? neg_ti_reg_232 : tmp_5_reg_227);

assign tmp_3_fu_122_p1 = grp_fu_116_p2[39:0];

assign tmp_4_fu_151_p1 = $signed(tmp_8_fu_141_p4);

assign tmp_5_fu_155_p1 = $signed(tmp_9_reg_222);

assign tmp_6_fu_158_p3 = ((tmp_7_reg_206[0:0] === 1'b1) ? tmp_4_fu_151_p1 : tmp_5_fu_155_p1);

assign tmp_8_fu_141_p4 = {{neg_mul_fu_136_p2[39:35]}};

assign tmp_fu_83_p1 = $signed(x);

endmodule //leds_controller
