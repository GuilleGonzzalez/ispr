-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dct,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=1855,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=1,HLS_SYN_FF=1005,HLS_SYN_LUT=1096}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_116 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_i_reg_127 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_i_reg_138 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten2_reg_149 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_i2_reg_160 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_i5_reg_171 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_196_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal c_i_mid2_fu_214_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_i_mid2_reg_388 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter1_c_i_mid2_reg_388 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_i_cast8_mid2_v_fu_222_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_i_cast8_mid2_v_reg_395 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter1_r_i_cast8_mid2_v_reg_395 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_230_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_reg_401 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_fu_255_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond_flatten2_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_416 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp1_iter1_exitcond_flatten2_reg_416 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next2_fu_291_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal c_i5_mid2_fu_309_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_i5_mid2_reg_425 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_i2_cast4_mid2_v_fu_317_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_i2_cast4_mid2_v_reg_432 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_325_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_reg_438 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum3_i_fu_364_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum3_i_reg_448 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_1_fu_370_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_dct_2d_fu_182_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal buf_2d_in_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_2d_in_ce0 : STD_LOGIC;
    signal buf_2d_in_we0 : STD_LOGIC;
    signal buf_2d_in_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_out_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_2d_out_ce0 : STD_LOGIC;
    signal buf_2d_out_we0 : STD_LOGIC;
    signal buf_2d_out_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_2d_fu_182_ap_start : STD_LOGIC;
    signal grp_dct_2d_fu_182_ap_idle : STD_LOGIC;
    signal grp_dct_2d_fu_182_ap_ready : STD_LOGIC;
    signal grp_dct_2d_fu_182_in_block_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_2d_fu_182_in_block_ce0 : STD_LOGIC;
    signal grp_dct_2d_fu_182_out_block_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_2d_fu_182_out_block_ce0 : STD_LOGIC;
    signal grp_dct_2d_fu_182_out_block_we0 : STD_LOGIC;
    signal grp_dct_2d_fu_182_out_block_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_i_phi_fu_131_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal c_i_phi_fu_142_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_i2_phi_fu_164_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0_flag00000000 : BOOLEAN;
    signal c_i5_phi_fu_175_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_grp_dct_2d_fu_182_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sum_i_cast_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_cast_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_cast_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum3_i_cast_fu_375_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_202_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_mid2_fu_234_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_i_cast6_fu_241_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_i_fu_244_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_260_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_cast_fu_267_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_i_cast5_cast_fu_271_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_274_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_i1_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_1_fu_297_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_19_fu_329_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_30_cast_fu_336_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_i5_cast1_cast_fu_350_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_353_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i4_mid2_fu_340_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_i5_cast2_fu_347_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component dct_2d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_block_ce0 : OUT STD_LOGIC;
        in_block_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        out_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        out_block_ce0 : OUT STD_LOGIC;
        out_block_we0 : OUT STD_LOGIC;
        out_block_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dct_2d_row_outbuf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    buf_2d_in_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_2d_in_address0,
        ce0 => buf_2d_in_ce0,
        we0 => buf_2d_in_we0,
        d0 => input_r_q0,
        q0 => buf_2d_in_q0);

    buf_2d_out_U : component dct_2d_row_outbuf
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_2d_out_address0,
        ce0 => buf_2d_out_ce0,
        we0 => buf_2d_out_we0,
        d0 => grp_dct_2d_fu_182_out_block_d0,
        q0 => buf_2d_out_q0);

    grp_dct_2d_fu_182 : component dct_2d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dct_2d_fu_182_ap_start,
        ap_done => grp_dct_2d_fu_182_ap_done,
        ap_idle => grp_dct_2d_fu_182_ap_idle,
        ap_ready => grp_dct_2d_fu_182_ap_ready,
        in_block_address0 => grp_dct_2d_fu_182_in_block_address0,
        in_block_ce0 => grp_dct_2d_fu_182_in_block_ce0,
        in_block_q0 => buf_2d_in_q0,
        out_block_address0 => grp_dct_2d_fu_182_out_block_address0,
        out_block_ce0 => grp_dct_2d_fu_182_out_block_ce0,
        out_block_we0 => grp_dct_2d_fu_182_out_block_we0,
        out_block_d0 => grp_dct_2d_fu_182_out_block_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_dct_2d_fu_182_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state7 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_dct_2d_fu_182_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dct_2d_fu_182_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dct_2d_fu_182_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_reg_grp_dct_2d_fu_182_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dct_2d_fu_182_ap_ready)) then 
                    ap_reg_grp_dct_2d_fu_182_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_i5_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten2_reg_416) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                c_i5_reg_171 <= c_1_fu_370_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_dct_2d_fu_182_ap_done = ap_const_logic_1))) then 
                c_i5_reg_171 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    c_i_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_379 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                c_i_reg_138 <= c_fu_255_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_i_reg_138 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten2_fu_285_p2))) then 
                indvar_flatten2_reg_149 <= indvar_flatten_next2_fu_291_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_dct_2d_fu_182_ap_done = ap_const_logic_1))) then 
                indvar_flatten2_reg_149 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_190_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_116 <= indvar_flatten_next_fu_196_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_116 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    r_i2_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten2_reg_416) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
                r_i2_reg_160 <= r_i2_cast4_mid2_v_reg_432;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_dct_2d_fu_182_ap_done = ap_const_logic_1))) then 
                r_i2_reg_160 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_i_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_379 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                r_i_reg_127 <= r_i_cast8_mid2_v_reg_395;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_i_reg_127 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_c_i_mid2_reg_388 <= c_i_mid2_reg_388;
                ap_reg_pp0_iter1_exitcond_flatten_reg_379 <= exitcond_flatten_reg_379;
                ap_reg_pp0_iter1_r_i_cast8_mid2_v_reg_395 <= r_i_cast8_mid2_v_reg_395;
                exitcond_flatten_reg_379 <= exitcond_flatten_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp1_iter1_exitcond_flatten2_reg_416 <= exitcond_flatten2_reg_416;
                exitcond_flatten2_reg_416 <= exitcond_flatten2_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten2_fu_285_p2))) then
                c_i5_mid2_reg_425 <= c_i5_mid2_fu_309_p3;
                tmp_4_reg_438 <= tmp_4_fu_325_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_fu_190_p2 = ap_const_lv1_0))) then
                c_i_mid2_reg_388 <= c_i_mid2_fu_214_p3;
                tmp_3_reg_401 <= tmp_3_fu_230_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten2_fu_285_p2))) then
                r_i2_cast4_mid2_v_reg_432 <= r_i2_cast4_mid2_v_fu_317_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_190_p2 = ap_const_lv1_0))) then
                r_i_cast8_mid2_v_reg_395 <= r_i_cast8_mid2_v_fu_222_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten2_reg_416))) then
                sum3_i_reg_448 <= sum3_i_fu_364_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten_fu_190_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, exitcond_flatten2_fu_285_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter2, ap_CS_fsm_state6, grp_dct_2d_fu_182_ap_done, ap_block_pp1_stage0_flag00011011, ap_enable_reg_pp1_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_190_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_190_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_dct_2d_fu_182_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten2_fu_285_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten2_fu_285_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_190_p2)
    begin
        if ((exitcond_flatten_fu_190_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(exitcond_flatten2_fu_285_p2)
    begin
        if ((exitcond_flatten2_fu_285_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1) and (ap_const_logic_0 = ap_enable_reg_pp1_iter2))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_in_address0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_state6, grp_dct_2d_fu_182_in_block_address0, ap_block_pp0_stage0_flag00000000, tmp_28_cast_fu_280_p1)
    begin
        if (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            buf_2d_in_address0 <= tmp_28_cast_fu_280_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_2d_in_address0 <= grp_dct_2d_fu_182_in_block_address0;
        else 
            buf_2d_in_address0 <= "XXXXXX";
        end if; 
    end process;


    buf_2d_in_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2, ap_CS_fsm_state6, grp_dct_2d_fu_182_in_block_ce0)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            buf_2d_in_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_2d_in_ce0 <= grp_dct_2d_fu_182_in_block_ce0;
        else 
            buf_2d_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_in_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter1_exitcond_flatten_reg_379, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter1_exitcond_flatten_reg_379 = ap_const_lv1_0))) then 
            buf_2d_in_we0 <= ap_const_logic_1;
        else 
            buf_2d_in_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_out_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_state6, grp_dct_2d_fu_182_out_block_address0, ap_block_pp1_stage0_flag00000000, tmp_32_cast_fu_359_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            buf_2d_out_address0 <= tmp_32_cast_fu_359_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_2d_out_address0 <= grp_dct_2d_fu_182_out_block_address0;
        else 
            buf_2d_out_address0 <= "XXXXXX";
        end if; 
    end process;


    buf_2d_out_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state6, grp_dct_2d_fu_182_out_block_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            buf_2d_out_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_2d_out_ce0 <= grp_dct_2d_fu_182_out_block_ce0;
        else 
            buf_2d_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_out_we0_assign_proc : process(ap_CS_fsm_state6, grp_dct_2d_fu_182_out_block_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_2d_out_we0 <= grp_dct_2d_fu_182_out_block_we0;
        else 
            buf_2d_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_370_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(c_i5_mid2_reg_425));
    c_fu_255_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(c_i_mid2_reg_388));
    c_i5_cast1_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_i5_mid2_reg_425),8));
    c_i5_cast2_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_i5_mid2_reg_425),6));
    c_i5_mid2_fu_309_p3 <= 
        ap_const_lv4_0 when (exitcond_i1_fu_303_p2(0) = '1') else 
        c_i5_phi_fu_175_p4;

    c_i5_phi_fu_175_p4_assign_proc : process(c_i5_reg_171, exitcond_flatten2_reg_416, ap_CS_fsm_pp1_stage0, c_1_fu_370_p2, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten2_reg_416) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            c_i5_phi_fu_175_p4 <= c_1_fu_370_p2;
        else 
            c_i5_phi_fu_175_p4 <= c_i5_reg_171;
        end if; 
    end process;

    c_i_cast5_cast_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter1_c_i_mid2_reg_388),8));
    c_i_cast6_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_i_mid2_reg_388),6));
    c_i_mid2_fu_214_p3 <= 
        ap_const_lv4_0 when (exitcond_i_fu_208_p2(0) = '1') else 
        c_i_phi_fu_142_p4;

    c_i_phi_fu_142_p4_assign_proc : process(c_i_reg_138, exitcond_flatten_reg_379, ap_CS_fsm_pp0_stage0, c_fu_255_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_379 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            c_i_phi_fu_142_p4 <= c_fu_255_p2;
        else 
            c_i_phi_fu_142_p4 <= c_i_reg_138;
        end if; 
    end process;

    exitcond_flatten2_fu_285_p2 <= "1" when (indvar_flatten2_reg_149 = ap_const_lv7_40) else "0";
    exitcond_flatten_fu_190_p2 <= "1" when (indvar_flatten_reg_116 = ap_const_lv7_40) else "0";
    exitcond_i1_fu_303_p2 <= "1" when (c_i5_phi_fu_175_p4 = ap_const_lv4_8) else "0";
    exitcond_i_fu_208_p2 <= "1" when (c_i_phi_fu_142_p4 = ap_const_lv4_8) else "0";
    grp_dct_2d_fu_182_ap_start <= ap_reg_grp_dct_2d_fu_182_ap_start;
    indvar_flatten_next2_fu_291_p2 <= std_logic_vector(unsigned(indvar_flatten2_reg_149) + unsigned(ap_const_lv7_1));
    indvar_flatten_next_fu_196_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_116) + unsigned(ap_const_lv7_1));
    input_r_address0 <= sum_i_cast_fu_250_p1(6 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_address0 <= sum3_i_cast_fu_375_p1(6 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= buf_2d_out_q0;

    output_r_we0_assign_proc : process(ap_block_pp1_stage0_flag00011001, ap_reg_pp1_iter1_exitcond_flatten2_reg_416, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond_flatten2_reg_416))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_1_fu_297_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(r_i2_phi_fu_164_p4));
    r_fu_202_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(r_i_phi_fu_131_p4));
    r_i2_cast4_mid2_v_fu_317_p3 <= 
        r_1_fu_297_p2 when (exitcond_i1_fu_303_p2(0) = '1') else 
        r_i2_phi_fu_164_p4;

    r_i2_phi_fu_164_p4_assign_proc : process(r_i2_reg_160, exitcond_flatten2_reg_416, ap_CS_fsm_pp1_stage0, r_i2_cast4_mid2_v_reg_432, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten2_reg_416) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            r_i2_phi_fu_164_p4 <= r_i2_cast4_mid2_v_reg_432;
        else 
            r_i2_phi_fu_164_p4 <= r_i2_reg_160;
        end if; 
    end process;

    r_i_cast8_mid2_v_fu_222_p3 <= 
        r_fu_202_p2 when (exitcond_i_fu_208_p2(0) = '1') else 
        r_i_phi_fu_131_p4;

    r_i_phi_fu_131_p4_assign_proc : process(r_i_reg_127, exitcond_flatten_reg_379, ap_CS_fsm_pp0_stage0, r_i_cast8_mid2_v_reg_395, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_379 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            r_i_phi_fu_131_p4 <= r_i_cast8_mid2_v_reg_395;
        else 
            r_i_phi_fu_131_p4 <= r_i_reg_127;
        end if; 
    end process;

    sum3_i_cast_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_i_reg_448),32));
    sum3_i_fu_364_p2 <= std_logic_vector(unsigned(tmp_i4_mid2_fu_340_p3) + unsigned(c_i5_cast2_fu_347_p1));
    sum_i_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_244_p2),32));
    sum_i_fu_244_p2 <= std_logic_vector(unsigned(tmp_i_mid2_fu_234_p3) + unsigned(c_i_cast6_fu_241_p1));
    tmp_19_fu_329_p3 <= (r_i2_cast4_mid2_v_reg_432 & ap_const_lv3_0);
    tmp_20_fu_353_p2 <= std_logic_vector(unsigned(tmp_30_cast_fu_336_p1) + unsigned(c_i5_cast1_cast_fu_350_p1));
    tmp_26_cast_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_260_p3),8));
    tmp_28_cast_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_274_p2),32));
    tmp_30_cast_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_329_p3),8));
    tmp_32_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_353_p2),32));
    tmp_3_fu_230_p1 <= r_i_cast8_mid2_v_fu_222_p3(3 - 1 downto 0);
    tmp_4_fu_325_p1 <= r_i2_cast4_mid2_v_fu_317_p3(3 - 1 downto 0);
    tmp_fu_260_p3 <= (ap_reg_pp0_iter1_r_i_cast8_mid2_v_reg_395 & ap_const_lv3_0);
    tmp_i4_mid2_fu_340_p3 <= (tmp_4_reg_438 & ap_const_lv3_0);
    tmp_i_mid2_fu_234_p3 <= (tmp_3_reg_401 & ap_const_lv3_0);
    tmp_s_fu_274_p2 <= std_logic_vector(unsigned(tmp_26_cast_fu_267_p1) + unsigned(c_i_cast5_cast_fu_271_p1));
end behav;
