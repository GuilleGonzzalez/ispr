// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_Xpose_Row_Outer_HH_
#define _Loop_Xpose_Row_Outer_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_Xpose_Row_Outer : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > row_outbuf_i_address0;
    sc_out< sc_logic > row_outbuf_i_ce0;
    sc_in< sc_lv<16> > row_outbuf_i_q0;
    sc_out< sc_lv<3> > col_inbuf_address0;
    sc_out< sc_logic > col_inbuf_ce0;
    sc_out< sc_logic > col_inbuf_we0;
    sc_out< sc_lv<128> > col_inbuf_d0;
    sc_in< sc_lv<128> > col_inbuf_q0;


    // Module declarations
    Loop_Xpose_Row_Outer(sc_module_name name);
    SC_HAS_PROCESS(Loop_Xpose_Row_Outer);

    ~Loop_Xpose_Row_Outer();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > indvar_flatten_reg_79;
    sc_signal< sc_lv<4> > j_0_i_reg_90;
    sc_signal< sc_lv<4> > i_1_i_reg_102;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_114_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_329;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_flatten_reg_329;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter2_exitcond_flatten_reg_329;
    sc_signal< sc_lv<7> > indvar_flatten_next_fu_120_p2;
    sc_signal< sc_lv<7> > indvar_flatten_next_reg_333;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<4> > i_1_i_mid2_fu_138_p3;
    sc_signal< sc_lv<4> > i_1_i_mid2_reg_338;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter1;
    sc_signal< bool > ap_block_state7_pp0_stage1_iter2;
    sc_signal< bool > ap_block_pp0_stage1_flag00011001;
    sc_signal< sc_lv<4> > j_0_i_cast8_mid2_v_fu_146_p3;
    sc_signal< sc_lv<4> > j_0_i_cast8_mid2_v_reg_344;
    sc_signal< sc_lv<3> > tmp_27_fu_154_p1;
    sc_signal< sc_lv<3> > tmp_27_reg_351;
    sc_signal< sc_lv<3> > col_inbuf_addr_reg_361;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter2_col_inbuf_addr_reg_361;
    sc_signal< sc_lv<4> > i_fu_187_p2;
    sc_signal< sc_lv<4> > i_reg_366;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<16> > row_outbuf_i_load_reg_371;
    sc_signal< sc_lv<1> > tmp_28_fu_205_p2;
    sc_signal< sc_lv<1> > tmp_28_reg_376;
    sc_signal< sc_lv<8> > tmp_29_fu_211_p1;
    sc_signal< sc_lv<8> > tmp_29_reg_382;
    sc_signal< sc_lv<128> > p_demorgan_fu_261_p2;
    sc_signal< sc_lv<128> > p_demorgan_reg_388;
    sc_signal< sc_lv<128> > tmp_40_fu_285_p2;
    sc_signal< sc_lv<128> > tmp_40_reg_394;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage1_flag00011011;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<7> > indvar_flatten_phi_fu_83_p4;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_lv<4> > j_0_i_phi_fu_94_p4;
    sc_signal< bool > ap_block_pp0_stage1_flag00000000;
    sc_signal< sc_lv<4> > i_1_i_phi_fu_106_p4;
    sc_signal< sc_lv<32> > tmp_8_cast_fu_182_p1;
    sc_signal< sc_lv<32> > j_0_i_cast8_mid2_fu_158_p1;
    sc_signal< sc_lv<1> > tmp_s_fu_132_p2;
    sc_signal< sc_lv<4> > j_fu_126_p2;
    sc_signal< sc_lv<7> > tmp_fu_165_p3;
    sc_signal< sc_lv<8> > tmp_7_cast_fu_172_p1;
    sc_signal< sc_lv<8> > j_0_i_cast8_mid2_cas_fu_162_p1;
    sc_signal< sc_lv<8> > tmp_8_fu_176_p2;
    sc_signal< sc_lv<7> > tmp_3_fu_192_p3;
    sc_signal< sc_lv<7> > tmp_4_fu_199_p2;
    sc_signal< sc_lv<8> > tmp_30_fu_215_p1;
    sc_signal< sc_lv<8> > tmp_33_fu_219_p3;
    sc_signal< sc_lv<8> > tmp_34_fu_227_p3;
    sc_signal< sc_lv<8> > tmp_36_fu_235_p2;
    sc_signal< sc_lv<128> > tmp_38_fu_241_p1;
    sc_signal< sc_lv<128> > tmp_39_fu_245_p1;
    sc_signal< sc_lv<128> > tmp_43_fu_249_p2;
    sc_signal< sc_lv<128> > tmp_44_fu_255_p2;
    sc_signal< sc_lv<8> > tmp_32_fu_270_p2;
    sc_signal< sc_lv<8> > tmp_35_fu_275_p3;
    sc_signal< sc_lv<128> > tmp_31_fu_267_p1;
    sc_signal< sc_lv<128> > tmp_37_fu_281_p1;
    sc_signal< sc_lv<128> > tmp_41_fu_291_p4;
    sc_signal< sc_lv<128> > tmp_45_fu_306_p2;
    sc_signal< sc_lv<128> > tmp_42_fu_300_p3;
    sc_signal< sc_lv<128> > tmp_46_fu_311_p2;
    sc_signal< sc_lv<128> > tmp_47_fu_317_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<7> ap_const_lv7_40;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<7> ap_const_lv7_F;
    static const sc_lv<8> ap_const_lv8_7F;
    static const sc_lv<128> ap_const_lv128_lc_1;
    static const sc_lv<32> ap_const_lv32_7F;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_pp0_stage1_flag00000000();
    void thread_ap_block_pp0_stage1_flag00011001();
    void thread_ap_block_pp0_stage1_flag00011011();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage1_iter1();
    void thread_ap_block_state6_pp0_stage0_iter2();
    void thread_ap_block_state7_pp0_stage1_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_col_inbuf_address0();
    void thread_col_inbuf_ce0();
    void thread_col_inbuf_d0();
    void thread_col_inbuf_we0();
    void thread_exitcond_flatten_fu_114_p2();
    void thread_i_1_i_mid2_fu_138_p3();
    void thread_i_1_i_phi_fu_106_p4();
    void thread_i_fu_187_p2();
    void thread_indvar_flatten_next_fu_120_p2();
    void thread_indvar_flatten_phi_fu_83_p4();
    void thread_j_0_i_cast8_mid2_cas_fu_162_p1();
    void thread_j_0_i_cast8_mid2_fu_158_p1();
    void thread_j_0_i_cast8_mid2_v_fu_146_p3();
    void thread_j_0_i_phi_fu_94_p4();
    void thread_j_fu_126_p2();
    void thread_p_demorgan_fu_261_p2();
    void thread_row_outbuf_i_address0();
    void thread_row_outbuf_i_ce0();
    void thread_tmp_27_fu_154_p1();
    void thread_tmp_28_fu_205_p2();
    void thread_tmp_29_fu_211_p1();
    void thread_tmp_30_fu_215_p1();
    void thread_tmp_31_fu_267_p1();
    void thread_tmp_32_fu_270_p2();
    void thread_tmp_33_fu_219_p3();
    void thread_tmp_34_fu_227_p3();
    void thread_tmp_35_fu_275_p3();
    void thread_tmp_36_fu_235_p2();
    void thread_tmp_37_fu_281_p1();
    void thread_tmp_38_fu_241_p1();
    void thread_tmp_39_fu_245_p1();
    void thread_tmp_3_fu_192_p3();
    void thread_tmp_40_fu_285_p2();
    void thread_tmp_41_fu_291_p4();
    void thread_tmp_42_fu_300_p3();
    void thread_tmp_43_fu_249_p2();
    void thread_tmp_44_fu_255_p2();
    void thread_tmp_45_fu_306_p2();
    void thread_tmp_46_fu_311_p2();
    void thread_tmp_47_fu_317_p2();
    void thread_tmp_4_fu_199_p2();
    void thread_tmp_7_cast_fu_172_p1();
    void thread_tmp_8_cast_fu_182_p1();
    void thread_tmp_8_fu_176_p2();
    void thread_tmp_fu_165_p3();
    void thread_tmp_s_fu_132_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
