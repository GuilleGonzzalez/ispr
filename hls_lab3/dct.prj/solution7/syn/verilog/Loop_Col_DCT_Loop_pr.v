// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_Col_DCT_Loop_pr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        col_inbuf_address0,
        col_inbuf_ce0,
        col_inbuf_q0,
        col_outbuf_i_address0,
        col_outbuf_i_ce0,
        col_outbuf_i_we0,
        col_outbuf_i_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state9 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [2:0] col_inbuf_address0;
output   col_inbuf_ce0;
input  [127:0] col_inbuf_q0;
output  [5:0] col_outbuf_i_address0;
output   col_outbuf_i_ce0;
output   col_outbuf_i_we0;
output  [15:0] col_outbuf_i_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg col_inbuf_ce0;
reg col_outbuf_i_ce0;
reg col_outbuf_i_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] dct_coeff_table_address0;
reg    dct_coeff_table_ce0;
wire   [126:0] dct_coeff_table_q0;
reg   [3:0] k_i_reg_156;
wire   [0:0] tmp_5_fu_167_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] i_fu_173_p2;
reg   [3:0] i_reg_505;
wire   [7:0] tmp_19_cast_fu_192_p1;
reg   [7:0] tmp_19_cast_reg_510;
reg   [2:0] col_inbuf_addr_reg_515;
wire   [0:0] tmp_i_fu_196_p2;
reg   [0:0] tmp_i_reg_520;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_tmp_i_reg_520;
reg   [0:0] ap_reg_pp0_iter2_tmp_i_reg_520;
reg   [0:0] ap_reg_pp0_iter3_tmp_i_reg_520;
reg   [0:0] ap_reg_pp0_iter4_tmp_i_reg_520;
wire   [3:0] k_fu_202_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] tmp_6_fu_217_p2;
reg   [7:0] tmp_6_reg_529;
reg   [7:0] ap_reg_pp0_iter1_tmp_6_reg_529;
reg   [7:0] ap_reg_pp0_iter2_tmp_6_reg_529;
reg   [7:0] ap_reg_pp0_iter3_tmp_6_reg_529;
reg   [7:0] ap_reg_pp0_iter4_tmp_6_reg_529;
wire   [15:0] tmp_51_fu_222_p1;
reg  signed [15:0] tmp_51_reg_539;
wire   [15:0] tmp_52_fu_226_p1;
reg  signed [15:0] tmp_52_reg_544;
reg   [15:0] tmp_6_i_reg_549;
reg  signed [15:0] ap_reg_pp0_iter2_tmp_6_i_reg_549;
reg   [15:0] tmp_7_i_reg_554;
reg  signed [15:0] ap_reg_pp0_iter2_tmp_7_i_reg_554;
reg  signed [15:0] tmp_8_i_reg_559;
reg  signed [15:0] tmp_10_i_reg_564;
reg   [15:0] tmp_11_i_reg_569;
reg  signed [15:0] ap_reg_pp0_iter2_tmp_11_i_reg_569;
reg   [15:0] tmp_12_i_reg_574;
reg  signed [15:0] ap_reg_pp0_iter2_tmp_12_i_reg_574;
reg  signed [15:0] tmp_13_i_reg_579;
reg  signed [15:0] tmp_14_i_reg_584;
reg   [15:0] tmp_15_i_reg_589;
reg  signed [15:0] ap_reg_pp0_iter2_tmp_15_i_reg_589;
reg   [15:0] tmp_16_i_reg_594;
reg  signed [15:0] ap_reg_pp0_iter2_tmp_16_i_reg_594;
reg  signed [15:0] tmp_17_i_reg_599;
reg  signed [15:0] tmp_18_i_reg_604;
reg  signed [14:0] tmp_2_reg_609;
reg  signed [15:0] tmp_20_i_reg_614;
wire  signed [28:0] tmp_3_i_fu_445_p2;
reg  signed [28:0] tmp_3_i_reg_619;
wire  signed [28:0] tmp_3_2_i_fu_451_p2;
reg  signed [28:0] tmp_3_2_i_reg_624;
wire  signed [28:0] tmp_3_4_i_fu_457_p2;
reg  signed [28:0] tmp_3_4_i_reg_629;
wire  signed [28:0] grp_fu_463_p3;
reg  signed [28:0] tmp5_reg_634;
reg    ap_enable_reg_pp0_iter2;
wire  signed [28:0] grp_fu_479_p3;
reg  signed [28:0] tmp1_reg_639;
reg    ap_enable_reg_pp0_iter3;
wire  signed [28:0] grp_fu_486_p3;
reg  signed [28:0] tmp2_reg_644;
(* use_dsp48 = "no" *) wire   [28:0] tmp3_fu_418_p2;
reg   [28:0] tmp3_reg_649;
reg   [15:0] tmp_1_i_reg_654;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg   [3:0] i_2_i_reg_145;
reg    ap_block_state1;
wire    ap_CS_fsm_state9;
wire   [31:0] i_2_i1_cast_i_fu_179_p1;
wire   [31:0] k_cast1_i_fu_208_p1;
wire    ap_block_pp0_stage0_flag00000000;
wire   [31:0] tmp_20_cast_fu_441_p1;
wire   [6:0] tmp_s_fu_184_p3;
wire   [7:0] k_cast1_i_cast_fu_213_p1;
wire  signed [28:0] grp_fu_493_p3;
(* use_dsp48 = "no" *) wire   [28:0] tmp_fu_422_p2;
wire   [28:0] tmp_9_i_fu_426_p2;
wire  signed [28:0] grp_fu_470_p3;
wire   [13:0] grp_fu_470_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

Loop_Row_DCT_Loopbkb #(
    .DataWidth( 127 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dct_coeff_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dct_coeff_table_address0),
    .ce0(dct_coeff_table_ce0),
    .q0(dct_coeff_table_q0)
);

dct_mul_mul_16s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
dct_mul_mul_16s_1cud_x_U15(
    .din0(tmp_51_reg_539),
    .din1(tmp_52_reg_544),
    .dout(tmp_3_i_fu_445_p2)
);

dct_mul_mul_16s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
dct_mul_mul_16s_1cud_x_U16(
    .din0(tmp_8_i_reg_559),
    .din1(tmp_10_i_reg_564),
    .dout(tmp_3_2_i_fu_451_p2)
);

dct_mul_mul_16s_1cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
dct_mul_mul_16s_1cud_x_U17(
    .din0(tmp_13_i_reg_579),
    .din1(tmp_14_i_reg_584),
    .dout(tmp_3_4_i_fu_457_p2)
);

dct_mac_muladd_16dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
dct_mac_muladd_16dEe_x_U18(
    .din0(tmp_17_i_reg_599),
    .din1(tmp_18_i_reg_604),
    .din2(grp_fu_470_p3),
    .dout(grp_fu_463_p3)
);

dct_mac_muladd_16eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 29 ))
dct_mac_muladd_16eOg_x_U19(
    .din0(tmp_20_i_reg_614),
    .din1(tmp_2_reg_609),
    .din2(grp_fu_470_p2),
    .dout(grp_fu_470_p3)
);

dct_mac_muladd_16dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
dct_mac_muladd_16dEe_x_U20(
    .din0(ap_reg_pp0_iter2_tmp_6_i_reg_549),
    .din1(ap_reg_pp0_iter2_tmp_7_i_reg_554),
    .din2(tmp_3_i_reg_619),
    .dout(grp_fu_479_p3)
);

dct_mac_muladd_16dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
dct_mac_muladd_16dEe_x_U21(
    .din0(ap_reg_pp0_iter2_tmp_11_i_reg_569),
    .din1(ap_reg_pp0_iter2_tmp_12_i_reg_574),
    .din2(tmp_3_2_i_reg_624),
    .dout(grp_fu_486_p3)
);

dct_mac_muladd_16dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
dct_mac_muladd_16dEe_x_U22(
    .din0(ap_reg_pp0_iter2_tmp_15_i_reg_589),
    .din1(ap_reg_pp0_iter2_tmp_16_i_reg_594),
    .din2(tmp_3_4_i_reg_629),
    .dout(grp_fu_493_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_167_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_167_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_167_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_2_i_reg_145 <= i_reg_505;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        i_2_i_reg_145 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_i_fu_196_p2))) begin
        k_i_reg_156 <= k_fu_202_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_167_p2 == 1'd0))) begin
        k_i_reg_156 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_tmp_6_reg_529 <= tmp_6_reg_529;
        ap_reg_pp0_iter1_tmp_i_reg_520 <= tmp_i_reg_520;
        tmp_i_reg_520 <= tmp_i_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_tmp_11_i_reg_569 <= tmp_11_i_reg_569;
        ap_reg_pp0_iter2_tmp_12_i_reg_574 <= tmp_12_i_reg_574;
        ap_reg_pp0_iter2_tmp_15_i_reg_589 <= tmp_15_i_reg_589;
        ap_reg_pp0_iter2_tmp_16_i_reg_594 <= tmp_16_i_reg_594;
        ap_reg_pp0_iter2_tmp_6_i_reg_549 <= tmp_6_i_reg_549;
        ap_reg_pp0_iter2_tmp_6_reg_529 <= ap_reg_pp0_iter1_tmp_6_reg_529;
        ap_reg_pp0_iter2_tmp_7_i_reg_554 <= tmp_7_i_reg_554;
        ap_reg_pp0_iter2_tmp_i_reg_520 <= ap_reg_pp0_iter1_tmp_i_reg_520;
        ap_reg_pp0_iter3_tmp_6_reg_529 <= ap_reg_pp0_iter2_tmp_6_reg_529;
        ap_reg_pp0_iter3_tmp_i_reg_520 <= ap_reg_pp0_iter2_tmp_i_reg_520;
        ap_reg_pp0_iter4_tmp_6_reg_529 <= ap_reg_pp0_iter3_tmp_6_reg_529;
        ap_reg_pp0_iter4_tmp_i_reg_520 <= ap_reg_pp0_iter3_tmp_i_reg_520;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_167_p2 == 1'd0))) begin
        col_inbuf_addr_reg_515 <= i_2_i1_cast_i_fu_179_p1;
        tmp_19_cast_reg_510[6 : 3] <= tmp_19_cast_fu_192_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_505 <= i_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3) & (1'd0 == ap_reg_pp0_iter2_tmp_i_reg_520))) begin
        tmp1_reg_639 <= grp_fu_479_p3;
        tmp2_reg_644 <= grp_fu_486_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_tmp_i_reg_520))) begin
        tmp3_reg_649 <= tmp3_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_tmp_i_reg_520) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        tmp5_reg_634 <= grp_fu_463_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_i_reg_520))) begin
        tmp_10_i_reg_564 <= {{col_inbuf_q0[47:32]}};
        tmp_11_i_reg_569 <= {{dct_coeff_table_q0[63:48]}};
        tmp_12_i_reg_574 <= {{col_inbuf_q0[63:48]}};
        tmp_13_i_reg_579 <= {{dct_coeff_table_q0[79:64]}};
        tmp_14_i_reg_584 <= {{col_inbuf_q0[79:64]}};
        tmp_15_i_reg_589 <= {{dct_coeff_table_q0[95:80]}};
        tmp_16_i_reg_594 <= {{col_inbuf_q0[95:80]}};
        tmp_17_i_reg_599 <= {{dct_coeff_table_q0[111:96]}};
        tmp_18_i_reg_604 <= {{col_inbuf_q0[111:96]}};
        tmp_20_i_reg_614 <= {{col_inbuf_q0[127:112]}};
        tmp_2_reg_609 <= {{dct_coeff_table_q0[126:112]}};
        tmp_51_reg_539 <= tmp_51_fu_222_p1;
        tmp_52_reg_544 <= tmp_52_fu_226_p1;
        tmp_6_i_reg_549 <= {{dct_coeff_table_q0[31:16]}};
        tmp_7_i_reg_554 <= {{col_inbuf_q0[31:16]}};
        tmp_8_i_reg_559 <= {{dct_coeff_table_q0[47:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter3_tmp_i_reg_520))) begin
        tmp_1_i_reg_654 <= {{tmp_9_i_fu_426_p2[28:13]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_tmp_i_reg_520))) begin
        tmp_3_2_i_reg_624 <= tmp_3_2_i_fu_451_p2;
        tmp_3_4_i_reg_629 <= tmp_3_4_i_fu_457_p2;
        tmp_3_i_reg_619 <= tmp_3_i_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_i_fu_196_p2))) begin
        tmp_6_reg_529 <= tmp_6_fu_217_p2;
    end
end

always @ (*) begin
    if ((tmp_i_fu_196_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_167_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_167_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        col_inbuf_ce0 = 1'b1;
    end else begin
        col_inbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5))) begin
        col_outbuf_i_ce0 = 1'b1;
    end else begin
        col_outbuf_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter4_tmp_i_reg_520))) begin
        col_outbuf_i_we0 = 1'b1;
    end else begin
        col_outbuf_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        dct_coeff_table_ce0 = 1'b1;
    end else begin
        dct_coeff_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_5_fu_167_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5) & (ap_enable_reg_pp0_iter4 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_i_fu_196_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5) & (ap_enable_reg_pp0_iter4 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_i_fu_196_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign col_inbuf_address0 = col_inbuf_addr_reg_515;

assign col_outbuf_i_address0 = tmp_20_cast_fu_441_p1;

assign col_outbuf_i_d0 = tmp_1_i_reg_654;

assign dct_coeff_table_address0 = k_cast1_i_fu_208_p1;

assign grp_fu_470_p2 = 29'd4096;

assign i_2_i1_cast_i_fu_179_p1 = i_2_i_reg_145;

assign i_fu_173_p2 = (i_2_i_reg_145 + 4'd1);

assign k_cast1_i_cast_fu_213_p1 = k_i_reg_156;

assign k_cast1_i_fu_208_p1 = k_i_reg_156;

assign k_fu_202_p2 = (k_i_reg_156 + 4'd1);

assign tmp3_fu_418_p2 = ($signed(tmp5_reg_634) + $signed(grp_fu_493_p3));

assign tmp_19_cast_fu_192_p1 = tmp_s_fu_184_p3;

assign tmp_20_cast_fu_441_p1 = ap_reg_pp0_iter4_tmp_6_reg_529;

assign tmp_51_fu_222_p1 = dct_coeff_table_q0[15:0];

assign tmp_52_fu_226_p1 = col_inbuf_q0[15:0];

assign tmp_5_fu_167_p2 = ((i_2_i_reg_145 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_6_fu_217_p2 = (k_cast1_i_cast_fu_213_p1 + tmp_19_cast_reg_510);

assign tmp_9_i_fu_426_p2 = (tmp3_reg_649 + tmp_fu_422_p2);

assign tmp_fu_422_p2 = ($signed(tmp2_reg_644) + $signed(tmp1_reg_639));

assign tmp_i_fu_196_p2 = ((k_i_reg_156 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_s_fu_184_p3 = {{i_2_i_reg_145}, {3'd0}};

always @ (posedge ap_clk) begin
    tmp_19_cast_reg_510[2:0] <= 3'b000;
    tmp_19_cast_reg_510[7] <= 1'b0;
end

endmodule //Loop_Col_DCT_Loop_pr
