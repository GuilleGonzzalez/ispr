// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_1d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_address0,
        src_ce0,
        src_q0,
        src1_address0,
        src1_ce0,
        src1_q0,
        src2_address0,
        src2_ce0,
        src2_q0,
        src3_address0,
        src3_ce0,
        src3_q0,
        src4_address0,
        src4_ce0,
        src4_q0,
        src5_address0,
        src5_ce0,
        src5_q0,
        src6_address0,
        src6_ce0,
        src6_q0,
        src7_address0,
        src7_ce0,
        src7_q0,
        i_2,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        i_21
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state8 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] src_address0;
output   src_ce0;
input  [15:0] src_q0;
output  [2:0] src1_address0;
output   src1_ce0;
input  [15:0] src1_q0;
output  [2:0] src2_address0;
output   src2_ce0;
input  [15:0] src2_q0;
output  [2:0] src3_address0;
output   src3_ce0;
input  [15:0] src3_q0;
output  [2:0] src4_address0;
output   src4_ce0;
input  [15:0] src4_q0;
output  [2:0] src5_address0;
output   src5_ce0;
input  [15:0] src5_q0;
output  [2:0] src6_address0;
output   src6_ce0;
input  [15:0] src6_q0;
output  [2:0] src7_address0;
output   src7_ce0;
input  [15:0] src7_q0;
input  [3:0] i_2;
output  [5:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [15:0] dst_d0;
input  [3:0] i_21;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_ce0;
reg src1_ce0;
reg src2_ce0;
reg src3_ce0;
reg src4_ce0;
reg src5_ce0;
reg src6_ce0;
reg src7_ce0;
reg dst_ce0;
reg dst_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] dct_coeff_table_0_address0;
reg    dct_coeff_table_0_ce0;
wire   [13:0] dct_coeff_table_0_q0;
wire   [2:0] dct_coeff_table_1_address0;
reg    dct_coeff_table_1_ce0;
wire   [14:0] dct_coeff_table_1_q0;
wire   [2:0] dct_coeff_table_2_address0;
reg    dct_coeff_table_2_ce0;
wire   [14:0] dct_coeff_table_2_q0;
wire   [2:0] dct_coeff_table_3_address0;
reg    dct_coeff_table_3_ce0;
wire   [14:0] dct_coeff_table_3_q0;
wire   [2:0] dct_coeff_table_4_address0;
reg    dct_coeff_table_4_ce0;
wire   [14:0] dct_coeff_table_4_q0;
wire   [2:0] dct_coeff_table_5_address0;
reg    dct_coeff_table_5_ce0;
wire   [14:0] dct_coeff_table_5_q0;
wire   [2:0] dct_coeff_table_6_address0;
reg    dct_coeff_table_6_ce0;
wire   [14:0] dct_coeff_table_6_q0;
wire   [2:0] dct_coeff_table_7_address0;
reg    dct_coeff_table_7_ce0;
wire   [14:0] dct_coeff_table_7_q0;
reg   [3:0] k_reg_288;
wire   [7:0] tmp_17_cast_fu_307_p1;
reg   [7:0] tmp_17_cast_reg_483;
reg   [2:0] src_addr_reg_488;
reg   [2:0] src1_addr_reg_493;
reg   [2:0] src2_addr_reg_498;
reg   [2:0] src3_addr_reg_503;
reg   [2:0] src4_addr_reg_508;
reg   [2:0] src5_addr_reg_513;
reg   [2:0] src6_addr_reg_518;
reg   [2:0] src7_addr_reg_523;
wire   [0:0] tmp_fu_323_p2;
reg   [0:0] tmp_reg_528;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_tmp_reg_528;
reg   [0:0] ap_reg_pp0_iter2_tmp_reg_528;
reg   [0:0] ap_reg_pp0_iter3_tmp_reg_528;
reg   [0:0] ap_reg_pp0_iter4_tmp_reg_528;
wire   [3:0] k_1_fu_329_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] k_cast1_fu_335_p1;
reg   [31:0] k_cast1_reg_537;
wire   [7:0] tmp_13_fu_346_p2;
reg   [7:0] tmp_13_reg_546;
reg   [7:0] ap_reg_pp0_iter1_tmp_13_reg_546;
reg   [7:0] ap_reg_pp0_iter2_tmp_13_reg_546;
reg   [7:0] ap_reg_pp0_iter3_tmp_13_reg_546;
reg   [7:0] ap_reg_pp0_iter4_tmp_13_reg_546;
reg  signed [14:0] dct_coeff_table_1_lo_reg_571;
reg  signed [15:0] src1_load_reg_576;
reg  signed [14:0] dct_coeff_table_3_lo_reg_586;
reg  signed [15:0] src3_load_reg_591;
reg  signed [14:0] dct_coeff_table_5_lo_reg_601;
reg  signed [15:0] src5_load_reg_606;
reg   [13:0] dct_coeff_table_0_lo_reg_621;
reg  signed [15:0] src_load_reg_626;
wire  signed [28:0] tmp_7_1_fu_426_p2;
reg  signed [28:0] tmp_7_1_reg_631;
reg  signed [14:0] dct_coeff_table_2_lo_reg_636;
reg  signed [15:0] src2_load_reg_641;
wire  signed [28:0] tmp_7_3_fu_432_p2;
reg  signed [28:0] tmp_7_3_reg_646;
reg  signed [14:0] dct_coeff_table_4_lo_reg_651;
reg  signed [15:0] src4_load_reg_656;
wire  signed [28:0] tmp_7_5_fu_438_p2;
reg  signed [28:0] tmp_7_5_reg_661;
reg  signed [14:0] dct_coeff_table_6_lo_reg_666;
reg  signed [15:0] src6_load_reg_671;
reg  signed [14:0] dct_coeff_table_7_lo_reg_676;
reg  signed [15:0] src7_load_reg_681;
(* use_dsp48 = "no" *) wire   [28:0] tmp1_fu_399_p2;
reg   [28:0] tmp1_reg_686;
wire  signed [28:0] grp_fu_460_p3;
reg  signed [28:0] tmp5_reg_691;
reg    ap_enable_reg_pp0_iter3;
wire  signed [28:0] grp_fu_467_p3;
reg  signed [28:0] tmp6_reg_696;
reg   [15:0] tmp_5_reg_701;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
wire   [31:0] i_2_cast_fu_311_p1;
wire    ap_block_pp0_stage0_flag00000000;
wire   [31:0] tmp_18_cast_fu_422_p1;
wire   [6:0] tmp_12_fu_299_p3;
wire   [7:0] k_cast1_cast_fu_342_p1;
wire  signed [28:0] grp_fu_444_p3;
wire  signed [28:0] grp_fu_452_p3;
(* use_dsp48 = "no" *) wire   [28:0] tmp4_fu_403_p2;
wire   [28:0] tmp_3_fu_407_p2;
wire   [13:0] grp_fu_444_p0;
wire  signed [28:0] grp_fu_474_p3;
wire   [13:0] grp_fu_474_p2;
wire    ap_CS_fsm_state8;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [28:0] grp_fu_444_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

dct_1d_dct_coeff_bkb #(
    .DataWidth( 14 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dct_coeff_table_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dct_coeff_table_0_address0),
    .ce0(dct_coeff_table_0_ce0),
    .q0(dct_coeff_table_0_q0)
);

dct_1d_dct_coeff_cud #(
    .DataWidth( 15 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dct_coeff_table_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dct_coeff_table_1_address0),
    .ce0(dct_coeff_table_1_ce0),
    .q0(dct_coeff_table_1_q0)
);

dct_1d_dct_coeff_dEe #(
    .DataWidth( 15 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dct_coeff_table_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dct_coeff_table_2_address0),
    .ce0(dct_coeff_table_2_ce0),
    .q0(dct_coeff_table_2_q0)
);

dct_1d_dct_coeff_eOg #(
    .DataWidth( 15 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dct_coeff_table_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dct_coeff_table_3_address0),
    .ce0(dct_coeff_table_3_ce0),
    .q0(dct_coeff_table_3_q0)
);

dct_1d_dct_coeff_fYi #(
    .DataWidth( 15 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dct_coeff_table_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dct_coeff_table_4_address0),
    .ce0(dct_coeff_table_4_ce0),
    .q0(dct_coeff_table_4_q0)
);

dct_1d_dct_coeff_g8j #(
    .DataWidth( 15 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dct_coeff_table_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dct_coeff_table_5_address0),
    .ce0(dct_coeff_table_5_ce0),
    .q0(dct_coeff_table_5_q0)
);

dct_1d_dct_coeff_hbi #(
    .DataWidth( 15 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dct_coeff_table_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dct_coeff_table_6_address0),
    .ce0(dct_coeff_table_6_ce0),
    .q0(dct_coeff_table_6_q0)
);

dct_1d_dct_coeff_ibs #(
    .DataWidth( 15 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
dct_coeff_table_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dct_coeff_table_7_address0),
    .ce0(dct_coeff_table_7_ce0),
    .q0(dct_coeff_table_7_q0)
);

dct_mul_mul_15s_1jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
dct_mul_mul_15s_1jbC_U9(
    .din0(dct_coeff_table_1_lo_reg_571),
    .din1(src1_load_reg_576),
    .dout(tmp_7_1_fu_426_p2)
);

dct_mul_mul_15s_1jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
dct_mul_mul_15s_1jbC_U10(
    .din0(dct_coeff_table_3_lo_reg_586),
    .din1(src3_load_reg_591),
    .dout(tmp_7_3_fu_432_p2)
);

dct_mul_mul_15s_1jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 29 ))
dct_mul_mul_15s_1jbC_U11(
    .din0(dct_coeff_table_5_lo_reg_601),
    .din1(src5_load_reg_606),
    .dout(tmp_7_5_fu_438_p2)
);

dct_mac_muladd_14kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
dct_mac_muladd_14kbM_U12(
    .din0(grp_fu_444_p0),
    .din1(src_load_reg_626),
    .din2(tmp_7_1_reg_631),
    .dout(grp_fu_444_p3)
);

dct_mac_muladd_15lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
dct_mac_muladd_15lbW_U13(
    .din0(dct_coeff_table_2_lo_reg_636),
    .din1(src2_load_reg_641),
    .din2(tmp_7_3_reg_646),
    .dout(grp_fu_452_p3)
);

dct_mac_muladd_15lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
dct_mac_muladd_15lbW_U14(
    .din0(dct_coeff_table_4_lo_reg_651),
    .din1(src4_load_reg_656),
    .din2(tmp_7_5_reg_661),
    .dout(grp_fu_460_p3)
);

dct_mac_muladd_15lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
dct_mac_muladd_15lbW_U15(
    .din0(dct_coeff_table_6_lo_reg_666),
    .din1(src6_load_reg_671),
    .din2(grp_fu_474_p3),
    .dout(grp_fu_467_p3)
);

dct_mac_muladd_15mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 14 ),
    .dout_WIDTH( 29 ))
dct_mac_muladd_15mb6_U16(
    .din0(dct_coeff_table_7_lo_reg_676),
    .din1(src7_load_reg_681),
    .din2(grp_fu_474_p2),
    .dout(grp_fu_474_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_fu_323_p2 == 1'd0))) begin
        k_reg_288 <= k_1_fu_329_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_reg_288 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_tmp_13_reg_546 <= tmp_13_reg_546;
        ap_reg_pp0_iter1_tmp_reg_528 <= tmp_reg_528;
        tmp_reg_528 <= tmp_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_tmp_13_reg_546 <= ap_reg_pp0_iter1_tmp_13_reg_546;
        ap_reg_pp0_iter2_tmp_reg_528 <= ap_reg_pp0_iter1_tmp_reg_528;
        ap_reg_pp0_iter3_tmp_13_reg_546 <= ap_reg_pp0_iter2_tmp_13_reg_546;
        ap_reg_pp0_iter3_tmp_reg_528 <= ap_reg_pp0_iter2_tmp_reg_528;
        ap_reg_pp0_iter4_tmp_13_reg_546 <= ap_reg_pp0_iter3_tmp_13_reg_546;
        ap_reg_pp0_iter4_tmp_reg_528 <= ap_reg_pp0_iter3_tmp_reg_528;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter1_tmp_reg_528 == 1'd0))) begin
        dct_coeff_table_0_lo_reg_621 <= dct_coeff_table_0_q0;
        dct_coeff_table_2_lo_reg_636 <= dct_coeff_table_2_q0;
        dct_coeff_table_4_lo_reg_651 <= dct_coeff_table_4_q0;
        dct_coeff_table_6_lo_reg_666 <= dct_coeff_table_6_q0;
        dct_coeff_table_7_lo_reg_676 <= dct_coeff_table_7_q0;
        src2_load_reg_641 <= src2_q0;
        src4_load_reg_656 <= src4_q0;
        src6_load_reg_671 <= src6_q0;
        src7_load_reg_681 <= src7_q0;
        src_load_reg_626 <= src_q0;
        tmp_7_1_reg_631 <= tmp_7_1_fu_426_p2;
        tmp_7_3_reg_646 <= tmp_7_3_fu_432_p2;
        tmp_7_5_reg_661 <= tmp_7_5_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (tmp_reg_528 == 1'd0))) begin
        dct_coeff_table_1_lo_reg_571 <= dct_coeff_table_1_q0;
        dct_coeff_table_3_lo_reg_586 <= dct_coeff_table_3_q0;
        dct_coeff_table_5_lo_reg_601 <= dct_coeff_table_5_q0;
        src1_load_reg_576 <= src1_q0;
        src3_load_reg_591 <= src3_q0;
        src5_load_reg_606 <= src5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (tmp_fu_323_p2 == 1'd0))) begin
        k_cast1_reg_537[3 : 0] <= k_cast1_fu_335_p1[3 : 0];
        tmp_13_reg_546 <= tmp_13_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        src1_addr_reg_493 <= i_2_cast_fu_311_p1;
        src2_addr_reg_498 <= i_2_cast_fu_311_p1;
        src3_addr_reg_503 <= i_2_cast_fu_311_p1;
        src4_addr_reg_508 <= i_2_cast_fu_311_p1;
        src5_addr_reg_513 <= i_2_cast_fu_311_p1;
        src6_addr_reg_518 <= i_2_cast_fu_311_p1;
        src7_addr_reg_523 <= i_2_cast_fu_311_p1;
        src_addr_reg_488 <= i_2_cast_fu_311_p1;
        tmp_17_cast_reg_483[6 : 3] <= tmp_17_cast_fu_307_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter2_tmp_reg_528 == 1'd0))) begin
        tmp1_reg_686 <= tmp1_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter2_tmp_reg_528 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        tmp5_reg_691 <= grp_fu_460_p3;
        tmp6_reg_696 <= grp_fu_467_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter3_tmp_reg_528 == 1'd0))) begin
        tmp_5_reg_701 <= {{tmp_3_fu_407_p2[28:13]}};
    end
end

always @ (*) begin
    if ((tmp_fu_323_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        dct_coeff_table_0_ce0 = 1'b1;
    end else begin
        dct_coeff_table_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        dct_coeff_table_1_ce0 = 1'b1;
    end else begin
        dct_coeff_table_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        dct_coeff_table_2_ce0 = 1'b1;
    end else begin
        dct_coeff_table_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        dct_coeff_table_3_ce0 = 1'b1;
    end else begin
        dct_coeff_table_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        dct_coeff_table_4_ce0 = 1'b1;
    end else begin
        dct_coeff_table_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        dct_coeff_table_5_ce0 = 1'b1;
    end else begin
        dct_coeff_table_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        dct_coeff_table_6_ce0 = 1'b1;
    end else begin
        dct_coeff_table_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        dct_coeff_table_7_ce0 = 1'b1;
    end else begin
        dct_coeff_table_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5))) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5) & (ap_reg_pp0_iter4_tmp_reg_528 == 1'd0))) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        src1_ce0 = 1'b1;
    end else begin
        src1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        src2_ce0 = 1'b1;
    end else begin
        src2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        src3_ce0 = 1'b1;
    end else begin
        src3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        src4_ce0 = 1'b1;
    end else begin
        src4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        src5_ce0 = 1'b1;
    end else begin
        src5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        src6_ce0 = 1'b1;
    end else begin
        src6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        src7_ce0 = 1'b1;
    end else begin
        src7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5) & (ap_enable_reg_pp0_iter4 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_fu_323_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5) & (ap_enable_reg_pp0_iter4 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_fu_323_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dct_coeff_table_0_address0 = k_cast1_reg_537;

assign dct_coeff_table_1_address0 = k_cast1_fu_335_p1;

assign dct_coeff_table_2_address0 = k_cast1_reg_537;

assign dct_coeff_table_3_address0 = k_cast1_fu_335_p1;

assign dct_coeff_table_4_address0 = k_cast1_reg_537;

assign dct_coeff_table_5_address0 = k_cast1_fu_335_p1;

assign dct_coeff_table_6_address0 = k_cast1_reg_537;

assign dct_coeff_table_7_address0 = k_cast1_reg_537;

assign dst_address0 = tmp_18_cast_fu_422_p1;

assign dst_d0 = tmp_5_reg_701;

assign grp_fu_444_p0 = grp_fu_444_p00;

assign grp_fu_444_p00 = dct_coeff_table_0_lo_reg_621;

assign grp_fu_474_p2 = 29'd4096;

assign i_2_cast_fu_311_p1 = i_2;

assign k_1_fu_329_p2 = (k_reg_288 + 4'd1);

assign k_cast1_cast_fu_342_p1 = k_reg_288;

assign k_cast1_fu_335_p1 = k_reg_288;

assign src1_address0 = src1_addr_reg_493;

assign src2_address0 = src2_addr_reg_498;

assign src3_address0 = src3_addr_reg_503;

assign src4_address0 = src4_addr_reg_508;

assign src5_address0 = src5_addr_reg_513;

assign src6_address0 = src6_addr_reg_518;

assign src7_address0 = src7_addr_reg_523;

assign src_address0 = src_addr_reg_488;

assign tmp1_fu_399_p2 = ($signed(grp_fu_444_p3) + $signed(grp_fu_452_p3));

assign tmp4_fu_403_p2 = ($signed(tmp5_reg_691) + $signed(tmp6_reg_696));

assign tmp_12_fu_299_p3 = {{i_21}, {3'd0}};

assign tmp_13_fu_346_p2 = (tmp_17_cast_reg_483 + k_cast1_cast_fu_342_p1);

assign tmp_17_cast_fu_307_p1 = tmp_12_fu_299_p3;

assign tmp_18_cast_fu_422_p1 = ap_reg_pp0_iter4_tmp_13_reg_546;

assign tmp_3_fu_407_p2 = (tmp1_reg_686 + tmp4_fu_403_p2);

assign tmp_fu_323_p2 = ((k_reg_288 == 4'd8) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_17_cast_reg_483[2:0] <= 3'b000;
    tmp_17_cast_reg_483[7] <= 1'b0;
    k_cast1_reg_537[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //dct_1d
