// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_2d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_block_address0,
        in_block_ce0,
        in_block_q0,
        out_block_address0,
        out_block_ce0,
        out_block_we0,
        out_block_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] in_block_address0;
output   in_block_ce0;
input  [15:0] in_block_q0;
output  [5:0] out_block_address0;
output   out_block_ce0;
output   out_block_we0;
output  [15:0] out_block_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_block_ce0;
reg out_block_ce0;
reg out_block_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_4_fu_190_p2;
reg   [3:0] i_4_reg_363;
wire    ap_CS_fsm_state2;
wire   [7:0] j_cast5_cast_fu_196_p1;
reg   [7:0] j_cast5_cast_reg_368;
wire    ap_CS_fsm_state4;
wire   [7:0] tmp_6_cast_fu_208_p1;
reg   [7:0] tmp_6_cast_reg_373;
wire   [3:0] j_2_fu_218_p2;
reg   [3:0] j_2_reg_381;
wire    ap_CS_fsm_state5;
reg   [5:0] col_inbuf_addr_reg_391;
wire   [3:0] i_6_fu_266_p2;
reg   [3:0] i_6_reg_399;
wire   [3:0] i_5_fu_278_p2;
reg   [3:0] i_5_reg_407;
wire    ap_CS_fsm_state7;
wire   [7:0] j_1_cast2_cast_fu_284_p1;
reg   [7:0] j_1_cast2_cast_reg_412;
wire    ap_CS_fsm_state9;
wire   [7:0] tmp_14_cast_fu_296_p1;
reg   [7:0] tmp_14_cast_reg_417;
wire   [3:0] j_3_fu_306_p2;
reg   [3:0] j_3_reg_425;
reg   [5:0] out_block_addr_reg_430;
wire    ap_CS_fsm_state10;
wire   [3:0] i_7_fu_354_p2;
reg   [3:0] i_7_reg_443;
reg   [5:0] row_outbuf_address0;
reg    row_outbuf_ce0;
reg    row_outbuf_we0;
wire   [15:0] row_outbuf_q0;
reg   [5:0] col_outbuf_address0;
reg    col_outbuf_ce0;
reg    col_outbuf_we0;
wire   [15:0] col_outbuf_q0;
reg   [5:0] col_inbuf_address0;
reg    col_inbuf_ce0;
reg    col_inbuf_we0;
wire   [15:0] col_inbuf_q0;
wire    grp_dct_1d2_fu_169_ap_start;
wire    grp_dct_1d2_fu_169_ap_done;
wire    grp_dct_1d2_fu_169_ap_idle;
wire    grp_dct_1d2_fu_169_ap_ready;
wire   [5:0] grp_dct_1d2_fu_169_src_address0;
wire    grp_dct_1d2_fu_169_src_ce0;
reg   [15:0] grp_dct_1d2_fu_169_src_q0;
reg   [3:0] grp_dct_1d2_fu_169_i_2;
wire   [5:0] grp_dct_1d2_fu_169_dst_address0;
wire    grp_dct_1d2_fu_169_dst_ce0;
wire    grp_dct_1d2_fu_169_dst_we0;
wire   [15:0] grp_dct_1d2_fu_169_dst_d0;
reg   [3:0] grp_dct_1d2_fu_169_i_21;
reg   [3:0] i_reg_101;
wire    ap_CS_fsm_state3;
reg   [3:0] j_reg_113;
wire   [0:0] tmp_s_fu_260_p2;
wire   [0:0] tmp_fu_184_p2;
reg   [3:0] i_1_reg_124;
wire   [0:0] tmp_8_fu_212_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] i_2_reg_135;
wire    ap_CS_fsm_state8;
reg   [3:0] j_1_reg_147;
wire   [0:0] tmp_2_fu_348_p2;
wire   [0:0] tmp_9_fu_272_p2;
reg   [3:0] i_3_reg_158;
wire   [0:0] tmp_1_fu_300_p2;
wire    ap_CS_fsm_state11;
reg    ap_reg_grp_dct_1d2_fu_169_ap_start;
wire   [31:0] tmp_11_cast_fu_245_p1;
wire   [31:0] tmp_12_cast_fu_255_p1;
wire   [31:0] tmp_15_cast_fu_321_p1;
wire   [31:0] tmp_18_cast_fu_343_p1;
wire   [6:0] tmp_5_fu_200_p3;
wire   [6:0] tmp_7_fu_228_p3;
wire   [7:0] tmp_10_cast_fu_236_p1;
wire   [7:0] tmp_6_fu_240_p2;
wire   [7:0] i_1_cast4_cast_fu_224_p1;
wire   [7:0] tmp_10_fu_250_p2;
wire   [6:0] tmp_11_fu_288_p3;
wire   [7:0] i_3_cast1_cast_fu_312_p1;
wire   [7:0] tmp_12_fu_316_p2;
wire   [6:0] tmp_13_fu_326_p3;
wire   [7:0] tmp_17_cast_fu_334_p1;
wire   [7:0] tmp_14_fu_338_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_reg_grp_dct_1d2_fu_169_ap_start = 1'b0;
end

dct_2d_row_outbuf #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
row_outbuf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(row_outbuf_address0),
    .ce0(row_outbuf_ce0),
    .we0(row_outbuf_we0),
    .d0(grp_dct_1d2_fu_169_dst_d0),
    .q0(row_outbuf_q0)
);

dct_2d_row_outbuf #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
col_outbuf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(col_outbuf_address0),
    .ce0(col_outbuf_ce0),
    .we0(col_outbuf_we0),
    .d0(grp_dct_1d2_fu_169_dst_d0),
    .q0(col_outbuf_q0)
);

dct_2d_row_outbuf #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
col_inbuf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(col_inbuf_address0),
    .ce0(col_inbuf_ce0),
    .we0(col_inbuf_we0),
    .d0(row_outbuf_q0),
    .q0(col_inbuf_q0)
);

dct_1d2 grp_dct_1d2_fu_169(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dct_1d2_fu_169_ap_start),
    .ap_done(grp_dct_1d2_fu_169_ap_done),
    .ap_idle(grp_dct_1d2_fu_169_ap_idle),
    .ap_ready(grp_dct_1d2_fu_169_ap_ready),
    .src_address0(grp_dct_1d2_fu_169_src_address0),
    .src_ce0(grp_dct_1d2_fu_169_src_ce0),
    .src_q0(grp_dct_1d2_fu_169_src_q0),
    .i_2(grp_dct_1d2_fu_169_i_2),
    .dst_address0(grp_dct_1d2_fu_169_dst_address0),
    .dst_ce0(grp_dct_1d2_fu_169_dst_ce0),
    .dst_we0(grp_dct_1d2_fu_169_dst_we0),
    .dst_d0(grp_dct_1d2_fu_169_dst_d0),
    .i_21(grp_dct_1d2_fu_169_i_21)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_dct_1d2_fu_169_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state2) & (tmp_fu_184_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_9_fu_272_p2)))) begin
            ap_reg_grp_dct_1d2_fu_169_ap_start <= 1'b1;
        end else if ((1'b1 == grp_dct_1d2_fu_169_ap_ready)) begin
            ap_reg_grp_dct_1d2_fu_169_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_reg_124 <= i_6_reg_399;
    end else if (((1'b1 == ap_CS_fsm_state4) & (tmp_8_fu_212_p2 == 1'd0))) begin
        i_1_reg_124 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_8_fu_212_p2))) begin
        i_2_reg_135 <= 4'd0;
    end else if (((grp_dct_1d2_fu_169_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_2_reg_135 <= i_5_reg_407;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_3_reg_158 <= i_7_reg_443;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_1_fu_300_p2))) begin
        i_3_reg_158 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_dct_1d2_fu_169_ap_done == 1'b1))) begin
        i_reg_101 <= i_4_reg_363;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_101 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_9_fu_272_p2))) begin
        j_1_reg_147 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == tmp_2_fu_348_p2))) begin
        j_1_reg_147 <= j_3_reg_425;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_fu_184_p2))) begin
        j_reg_113 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_s_fu_260_p2 == 1'd1))) begin
        j_reg_113 <= j_2_reg_381;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        col_inbuf_addr_reg_391 <= tmp_12_cast_fu_255_p1;
        i_6_reg_399 <= i_6_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_4_reg_363 <= i_4_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_5_reg_407 <= i_5_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_7_reg_443 <= i_7_fu_354_p2;
        out_block_addr_reg_430 <= tmp_15_cast_fu_321_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_1_cast2_cast_reg_412[3 : 0] <= j_1_cast2_cast_fu_284_p1[3 : 0];
        j_3_reg_425 <= j_3_fu_306_p2;
        tmp_14_cast_reg_417[6 : 3] <= tmp_14_cast_fu_296_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_2_reg_381 <= j_2_fu_218_p2;
        j_cast5_cast_reg_368[3 : 0] <= j_cast5_cast_fu_196_p1[3 : 0];
        tmp_6_cast_reg_373[6 : 3] <= tmp_6_cast_fu_208_p1[6 : 3];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_1_fu_300_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_1_fu_300_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        col_inbuf_address0 = col_inbuf_addr_reg_391;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        col_inbuf_address0 = grp_dct_1d2_fu_169_src_address0;
    end else begin
        col_inbuf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        col_inbuf_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        col_inbuf_ce0 = grp_dct_1d2_fu_169_src_ce0;
    end else begin
        col_inbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        col_inbuf_we0 = 1'b1;
    end else begin
        col_inbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        col_outbuf_address0 = tmp_18_cast_fu_343_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        col_outbuf_address0 = grp_dct_1d2_fu_169_dst_address0;
    end else begin
        col_outbuf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        col_outbuf_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        col_outbuf_ce0 = grp_dct_1d2_fu_169_dst_ce0;
    end else begin
        col_outbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        col_outbuf_we0 = grp_dct_1d2_fu_169_dst_we0;
    end else begin
        col_outbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_dct_1d2_fu_169_i_2 = i_2_reg_135;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_dct_1d2_fu_169_i_2 = i_reg_101;
    end else begin
        grp_dct_1d2_fu_169_i_2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_dct_1d2_fu_169_i_21 = i_2_reg_135;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_dct_1d2_fu_169_i_21 = i_reg_101;
    end else begin
        grp_dct_1d2_fu_169_i_21 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_dct_1d2_fu_169_src_q0 = col_inbuf_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_dct_1d2_fu_169_src_q0 = in_block_q0;
    end else begin
        grp_dct_1d2_fu_169_src_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_block_ce0 = grp_dct_1d2_fu_169_src_ce0;
    end else begin
        in_block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        out_block_ce0 = 1'b1;
    end else begin
        out_block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        out_block_we0 = 1'b1;
    end else begin
        out_block_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        row_outbuf_address0 = tmp_11_cast_fu_245_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        row_outbuf_address0 = grp_dct_1d2_fu_169_dst_address0;
    end else begin
        row_outbuf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        row_outbuf_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        row_outbuf_ce0 = grp_dct_1d2_fu_169_dst_ce0;
    end else begin
        row_outbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        row_outbuf_we0 = grp_dct_1d2_fu_169_dst_we0;
    end else begin
        row_outbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_fu_184_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_dct_1d2_fu_169_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_8_fu_212_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (tmp_s_fu_260_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == tmp_9_fu_272_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((grp_dct_1d2_fu_169_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_1_fu_300_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == tmp_2_fu_348_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_dct_1d2_fu_169_ap_start = ap_reg_grp_dct_1d2_fu_169_ap_start;

assign i_1_cast4_cast_fu_224_p1 = i_1_reg_124;

assign i_3_cast1_cast_fu_312_p1 = i_3_reg_158;

assign i_4_fu_190_p2 = (i_reg_101 + 4'd1);

assign i_5_fu_278_p2 = (i_2_reg_135 + 4'd1);

assign i_6_fu_266_p2 = (i_1_reg_124 + 4'd1);

assign i_7_fu_354_p2 = (i_3_reg_158 + 4'd1);

assign in_block_address0 = grp_dct_1d2_fu_169_src_address0;

assign j_1_cast2_cast_fu_284_p1 = j_1_reg_147;

assign j_2_fu_218_p2 = (j_reg_113 + 4'd1);

assign j_3_fu_306_p2 = (j_1_reg_147 + 4'd1);

assign j_cast5_cast_fu_196_p1 = j_reg_113;

assign out_block_address0 = out_block_addr_reg_430;

assign out_block_d0 = col_outbuf_q0;

assign tmp_10_cast_fu_236_p1 = tmp_7_fu_228_p3;

assign tmp_10_fu_250_p2 = (i_1_cast4_cast_fu_224_p1 + tmp_6_cast_reg_373);

assign tmp_11_cast_fu_245_p1 = tmp_6_fu_240_p2;

assign tmp_11_fu_288_p3 = {{j_1_reg_147}, {3'd0}};

assign tmp_12_cast_fu_255_p1 = tmp_10_fu_250_p2;

assign tmp_12_fu_316_p2 = (i_3_cast1_cast_fu_312_p1 + tmp_14_cast_reg_417);

assign tmp_13_fu_326_p3 = {{i_3_reg_158}, {3'd0}};

assign tmp_14_cast_fu_296_p1 = tmp_11_fu_288_p3;

assign tmp_14_fu_338_p2 = (j_1_cast2_cast_reg_412 + tmp_17_cast_fu_334_p1);

assign tmp_15_cast_fu_321_p1 = tmp_12_fu_316_p2;

assign tmp_17_cast_fu_334_p1 = tmp_13_fu_326_p3;

assign tmp_18_cast_fu_343_p1 = tmp_14_fu_338_p2;

assign tmp_1_fu_300_p2 = ((j_1_reg_147 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_2_fu_348_p2 = ((i_3_reg_158 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_5_fu_200_p3 = {{j_reg_113}, {3'd0}};

assign tmp_6_cast_fu_208_p1 = tmp_5_fu_200_p3;

assign tmp_6_fu_240_p2 = (j_cast5_cast_reg_368 + tmp_10_cast_fu_236_p1);

assign tmp_7_fu_228_p3 = {{i_1_reg_124}, {3'd0}};

assign tmp_8_fu_212_p2 = ((j_reg_113 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_9_fu_272_p2 = ((i_2_reg_135 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_fu_184_p2 = ((i_reg_101 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_s_fu_260_p2 = ((i_1_reg_124 == 4'd8) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    j_cast5_cast_reg_368[7:4] <= 4'b0000;
    tmp_6_cast_reg_373[2:0] <= 3'b000;
    tmp_6_cast_reg_373[7] <= 1'b0;
    j_1_cast2_cast_reg_412[7:4] <= 4'b0000;
    tmp_14_cast_reg_417[2:0] <= 3'b000;
    tmp_14_cast_reg_417[7] <= 1'b0;
end

endmodule //dct_2d
