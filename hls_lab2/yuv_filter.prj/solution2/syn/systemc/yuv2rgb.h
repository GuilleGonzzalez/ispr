// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _yuv2rgb_HH_
#define _yuv2rgb_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "yuv_filter_mul_mubkb.h"
#include "yuv_filter_ama_adfYi.h"
#include "yuv_filter_mac_mug8j.h"
#include "yuv_filter_mac_muhbi.h"

namespace ap_rtl {

struct yuv2rgb : public sc_module {
    // Port declarations 31
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<22> > in_channels_ch1_address0;
    sc_out< sc_logic > in_channels_ch1_ce0;
    sc_in< sc_lv<8> > in_channels_ch1_q0;
    sc_out< sc_lv<22> > in_channels_ch2_address0;
    sc_out< sc_logic > in_channels_ch2_ce0;
    sc_in< sc_lv<8> > in_channels_ch2_q0;
    sc_out< sc_lv<22> > in_channels_ch3_address0;
    sc_out< sc_logic > in_channels_ch3_ce0;
    sc_in< sc_lv<8> > in_channels_ch3_q0;
    sc_in< sc_lv<16> > in_width_read;
    sc_in< sc_lv<16> > in_height_read;
    sc_out< sc_lv<22> > out_channels_ch1_address0;
    sc_out< sc_logic > out_channels_ch1_ce0;
    sc_out< sc_logic > out_channels_ch1_we0;
    sc_out< sc_lv<8> > out_channels_ch1_d0;
    sc_out< sc_lv<22> > out_channels_ch2_address0;
    sc_out< sc_logic > out_channels_ch2_ce0;
    sc_out< sc_logic > out_channels_ch2_we0;
    sc_out< sc_lv<8> > out_channels_ch2_d0;
    sc_out< sc_lv<22> > out_channels_ch3_address0;
    sc_out< sc_logic > out_channels_ch3_ce0;
    sc_out< sc_logic > out_channels_ch3_we0;
    sc_out< sc_lv<8> > out_channels_ch3_d0;
    sc_out< sc_lv<16> > ap_return_0;
    sc_out< sc_lv<16> > ap_return_1;


    // Module declarations
    yuv2rgb(sc_module_name name);
    SC_HAS_PROCESS(yuv2rgb);

    ~yuv2rgb();

    sc_trace_file* mVcdFile;

    yuv_filter_mul_mubkb<1,1,16,16,32>* yuv_filter_mul_mubkb_x_U24;
    yuv_filter_ama_adfYi<1,1,5,8,10,9,18>* yuv_filter_ama_adfYi_U25;
    yuv_filter_mac_mug8j<1,1,8,8,17,17>* yuv_filter_mac_mug8j_U26;
    yuv_filter_mac_muhbi<1,1,10,8,18,18>* yuv_filter_mac_muhbi_U27;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > indvar_flatten_reg_194;
    sc_signal< sc_lv<16> > x_reg_205;
    sc_signal< sc_lv<16> > y_reg_216;
    sc_signal< sc_lv<32> > bound_fu_567_p2;
    sc_signal< sc_lv<32> > bound_reg_610;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_235_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_615;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter8;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter9;
    sc_signal< bool > ap_block_state12_pp0_stage0_iter10;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_flatten_reg_615;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter2_exitcond_flatten_reg_615;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter3_exitcond_flatten_reg_615;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter4_exitcond_flatten_reg_615;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter5_exitcond_flatten_reg_615;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter6_exitcond_flatten_reg_615;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter7_exitcond_flatten_reg_615;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter8_exitcond_flatten_reg_615;
    sc_signal< sc_lv<32> > indvar_flatten_next_fu_240_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<16> > y_mid2_fu_257_p3;
    sc_signal< sc_lv<16> > y_mid2_reg_624;
    sc_signal< sc_lv<16> > tmp_mid2_v_fu_265_p3;
    sc_signal< sc_lv<16> > tmp_mid2_v_reg_630;
    sc_signal< sc_lv<13> > tmp_fu_273_p1;
    sc_signal< sc_lv<13> > tmp_reg_635;
    sc_signal< sc_lv<15> > tmp_2_fu_277_p1;
    sc_signal< sc_lv<15> > tmp_2_reg_640;
    sc_signal< sc_lv<23> > tmp_8_fu_304_p2;
    sc_signal< sc_lv<23> > tmp_8_reg_645;
    sc_signal< sc_lv<16> > y_2_fu_310_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<32> > tmp_28_cast_fu_315_p1;
    sc_signal< sc_lv<32> > tmp_28_cast_reg_655;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter3_tmp_28_cast_reg_655;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter4_tmp_28_cast_reg_655;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter5_tmp_28_cast_reg_655;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter6_tmp_28_cast_reg_655;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter7_tmp_28_cast_reg_655;
    sc_signal< sc_lv<32> > ap_reg_pp0_iter8_tmp_28_cast_reg_655;
    sc_signal< sc_lv<8> > E_fu_319_p2;
    sc_signal< sc_lv<8> > E_reg_679;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter6_E_reg_679;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter7_E_reg_679;
    sc_signal< sc_lv<8> > Y_reg_685;
    sc_signal< sc_lv<8> > D_fu_325_p2;
    sc_signal< sc_lv<8> > D_reg_690;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter7_D_reg_690;
    sc_signal< sc_lv<17> > tmp_14_fu_334_p2;
    sc_signal< sc_lv<17> > tmp_14_reg_697;
    sc_signal< sc_lv<18> > grp_fu_573_p4;
    sc_signal< sc_lv<18> > tmp_10_reg_702;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_lv<17> > grp_fu_584_p3;
    sc_signal< sc_lv<17> > tmp1_reg_708;
    sc_signal< sc_lv<18> > tmp2_fu_357_p2;
    sc_signal< sc_lv<18> > tmp2_reg_713;
    sc_signal< sc_lv<18> > grp_fu_591_p3;
    sc_signal< sc_lv<18> > tmp_11_reg_718;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_lv<1> > icmp_fu_374_p2;
    sc_signal< sc_lv<1> > icmp_reg_724;
    sc_signal< sc_lv<8> > G_fu_436_p3;
    sc_signal< sc_lv<8> > G_reg_730;
    sc_signal< sc_lv<8> > B_fu_512_p3;
    sc_signal< sc_lv<8> > B_reg_735;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter10;
    sc_signal< sc_lv<16> > x_phi_fu_209_p4;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_lv<16> > y_phi_fu_220_p4;
    sc_signal< sc_lv<1> > exitcond5_fu_252_p2;
    sc_signal< sc_lv<16> > x_2_fu_246_p2;
    sc_signal< sc_lv<23> > p_shl3_cast_fu_288_p3;
    sc_signal< sc_lv<23> > p_shl2_cast_fu_281_p3;
    sc_signal< sc_lv<23> > tmp_s_fu_295_p2;
    sc_signal< sc_lv<23> > tmp_cast_fu_301_p1;
    sc_signal< sc_lv<8> > tmp_14_fu_334_p1;
    sc_signal< sc_lv<10> > p_shl1_fu_346_p3;
    sc_signal< sc_lv<18> > p_shl1_cast_fu_353_p1;
    sc_signal< sc_lv<2> > tmp_5_fu_365_p4;
    sc_signal< sc_lv<18> > tmp1_cast_fu_380_p1;
    sc_signal< sc_lv<18> > tmp_15_fu_383_p2;
    sc_signal< sc_lv<2> > tmp_16_fu_388_p4;
    sc_signal< sc_lv<1> > icmp1_fu_398_p2;
    sc_signal< sc_lv<1> > tmp_17_fu_404_p3;
    sc_signal< sc_lv<1> > tmp_6_fu_430_p2;
    sc_signal< sc_lv<8> > p_phitmp2_fu_422_p3;
    sc_signal< sc_lv<8> > phitmp2_fu_412_p4;
    sc_signal< sc_lv<17> > p_shl_fu_444_p3;
    sc_signal< sc_lv<19> > p_shl_cast_fu_451_p1;
    sc_signal< sc_lv<19> > tmp2_cast_fu_455_p1;
    sc_signal< sc_lv<19> > tmp_18_fu_458_p2;
    sc_signal< sc_lv<3> > tmp_19_fu_464_p4;
    sc_signal< sc_lv<1> > icmp2_fu_474_p2;
    sc_signal< sc_lv<1> > tmp_20_fu_480_p3;
    sc_signal< sc_lv<1> > tmp_9_fu_506_p2;
    sc_signal< sc_lv<8> > p_phitmp3_fu_498_p3;
    sc_signal< sc_lv<8> > phitmp3_fu_488_p4;
    sc_signal< sc_lv<1> > tmp_12_fu_520_p3;
    sc_signal< sc_lv<1> > tmp_3_fu_543_p2;
    sc_signal< sc_lv<8> > p_phitmp_fu_536_p3;
    sc_signal< sc_lv<8> > phitmp_fu_527_p4;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<16> > bound_fu_567_p0;
    sc_signal< sc_lv<16> > bound_fu_567_p1;
    sc_signal< sc_lv<5> > grp_fu_573_p0;
    sc_signal< sc_lv<8> > grp_fu_573_p1;
    sc_signal< sc_lv<10> > grp_fu_573_p2;
    sc_signal< sc_lv<9> > grp_fu_573_p3;
    sc_signal< sc_lv<8> > grp_fu_584_p0;
    sc_signal< sc_lv<10> > grp_fu_591_p0;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<32> > bound_fu_567_p00;
    sc_signal< sc_lv<32> > bound_fu_567_p10;
    sc_signal< sc_lv<9> > grp_fu_573_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state13;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<17> ap_const_lv17_1FF30;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<9> ap_const_lv9_1F0;
    static const sc_lv<18> ap_const_lv18_12A;
    static const sc_lv<18> ap_const_lv18_80;
    static const sc_lv<16> ap_const_lv16_FF9C;
    static const sc_lv<18> ap_const_lv18_199;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_B_fu_512_p3();
    void thread_D_fu_325_p2();
    void thread_E_fu_319_p2();
    void thread_G_fu_436_p3();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state13();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_state10_pp0_stage0_iter8();
    void thread_ap_block_state11_pp0_stage0_iter9();
    void thread_ap_block_state12_pp0_stage0_iter10();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_block_state9_pp0_stage0_iter7();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_bound_fu_567_p0();
    void thread_bound_fu_567_p00();
    void thread_bound_fu_567_p1();
    void thread_bound_fu_567_p10();
    void thread_exitcond5_fu_252_p2();
    void thread_exitcond_flatten_fu_235_p2();
    void thread_grp_fu_573_p0();
    void thread_grp_fu_573_p1();
    void thread_grp_fu_573_p10();
    void thread_grp_fu_573_p2();
    void thread_grp_fu_573_p3();
    void thread_grp_fu_584_p0();
    void thread_grp_fu_591_p0();
    void thread_icmp1_fu_398_p2();
    void thread_icmp2_fu_474_p2();
    void thread_icmp_fu_374_p2();
    void thread_in_channels_ch1_address0();
    void thread_in_channels_ch1_ce0();
    void thread_in_channels_ch2_address0();
    void thread_in_channels_ch2_ce0();
    void thread_in_channels_ch3_address0();
    void thread_in_channels_ch3_ce0();
    void thread_indvar_flatten_next_fu_240_p2();
    void thread_out_channels_ch1_address0();
    void thread_out_channels_ch1_ce0();
    void thread_out_channels_ch1_d0();
    void thread_out_channels_ch1_we0();
    void thread_out_channels_ch2_address0();
    void thread_out_channels_ch2_ce0();
    void thread_out_channels_ch2_d0();
    void thread_out_channels_ch2_we0();
    void thread_out_channels_ch3_address0();
    void thread_out_channels_ch3_ce0();
    void thread_out_channels_ch3_d0();
    void thread_out_channels_ch3_we0();
    void thread_p_phitmp2_fu_422_p3();
    void thread_p_phitmp3_fu_498_p3();
    void thread_p_phitmp_fu_536_p3();
    void thread_p_shl1_cast_fu_353_p1();
    void thread_p_shl1_fu_346_p3();
    void thread_p_shl2_cast_fu_281_p3();
    void thread_p_shl3_cast_fu_288_p3();
    void thread_p_shl_cast_fu_451_p1();
    void thread_p_shl_fu_444_p3();
    void thread_phitmp2_fu_412_p4();
    void thread_phitmp3_fu_488_p4();
    void thread_phitmp_fu_527_p4();
    void thread_tmp1_cast_fu_380_p1();
    void thread_tmp2_cast_fu_455_p1();
    void thread_tmp2_fu_357_p2();
    void thread_tmp_12_fu_520_p3();
    void thread_tmp_14_fu_334_p1();
    void thread_tmp_14_fu_334_p2();
    void thread_tmp_15_fu_383_p2();
    void thread_tmp_16_fu_388_p4();
    void thread_tmp_17_fu_404_p3();
    void thread_tmp_18_fu_458_p2();
    void thread_tmp_19_fu_464_p4();
    void thread_tmp_20_fu_480_p3();
    void thread_tmp_28_cast_fu_315_p1();
    void thread_tmp_2_fu_277_p1();
    void thread_tmp_3_fu_543_p2();
    void thread_tmp_5_fu_365_p4();
    void thread_tmp_6_fu_430_p2();
    void thread_tmp_8_fu_304_p2();
    void thread_tmp_9_fu_506_p2();
    void thread_tmp_cast_fu_301_p1();
    void thread_tmp_fu_273_p1();
    void thread_tmp_mid2_v_fu_265_p3();
    void thread_tmp_s_fu_295_p2();
    void thread_x_2_fu_246_p2();
    void thread_x_phi_fu_209_p4();
    void thread_y_2_fu_310_p2();
    void thread_y_mid2_fu_257_p3();
    void thread_y_phi_fu_220_p4();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
