// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv2rgb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_channels_ch1_dout,
        in_channels_ch1_empty_n,
        in_channels_ch1_read,
        in_channels_ch2_dout,
        in_channels_ch2_empty_n,
        in_channels_ch2_read,
        in_channels_ch3_dout,
        in_channels_ch3_empty_n,
        in_channels_ch3_read,
        in_width_dout,
        in_width_empty_n,
        in_width_read,
        in_height_dout,
        in_height_empty_n,
        in_height_read,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        out_width,
        out_width_ap_vld,
        out_height,
        out_height_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state10 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] in_channels_ch1_dout;
input   in_channels_ch1_empty_n;
output   in_channels_ch1_read;
input  [7:0] in_channels_ch2_dout;
input   in_channels_ch2_empty_n;
output   in_channels_ch2_read;
input  [7:0] in_channels_ch3_dout;
input   in_channels_ch3_empty_n;
output   in_channels_ch3_read;
input  [15:0] in_width_dout;
input   in_width_empty_n;
output   in_width_read;
input  [15:0] in_height_dout;
input   in_height_empty_n;
output   in_height_read;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] out_width;
output   out_width_ap_vld;
output  [15:0] out_height;
output   out_height_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_read;
reg in_channels_ch2_read;
reg in_channels_ch3_read;
reg in_width_read;
reg in_height_read;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;
reg out_width_ap_vld;
reg out_height_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_channels_ch1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_flatten_reg_619;
reg    in_channels_ch2_blk_n;
reg    in_channels_ch3_blk_n;
reg    in_width_blk_n;
reg    in_height_blk_n;
reg   [31:0] indvar_flatten_reg_200;
reg   [15:0] x_reg_211;
reg   [15:0] y_reg_222;
reg   [15:0] width_reg_601;
reg    ap_block_state1;
reg   [15:0] height_reg_607;
wire   [31:0] bound_fu_570_p2;
reg   [31:0] bound_reg_614;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_flatten_fu_239_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_619;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_619;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_619;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_619;
wire   [31:0] indvar_flatten_next_fu_244_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [15:0] y_mid2_fu_261_p3;
reg   [15:0] y_mid2_reg_628;
wire   [15:0] tmp_mid2_v_fu_269_p3;
reg   [15:0] tmp_mid2_v_reg_634;
wire   [12:0] tmp_fu_277_p1;
reg   [12:0] tmp_reg_639;
wire   [14:0] tmp_1_fu_281_p1;
reg   [14:0] tmp_1_reg_644;
wire   [22:0] tmp_s_fu_308_p2;
reg   [22:0] tmp_s_reg_649;
reg   [22:0] ap_reg_pp0_iter2_tmp_s_reg_649;
reg   [22:0] ap_reg_pp0_iter3_tmp_s_reg_649;
reg   [22:0] ap_reg_pp0_iter4_tmp_s_reg_649;
reg   [7:0] Y_reg_654;
reg   [7:0] ap_reg_pp0_iter2_Y_reg_654;
reg   [7:0] U_reg_659;
wire   [7:0] E_fu_314_p2;
reg   [7:0] E_reg_664;
reg   [7:0] ap_reg_pp0_iter2_E_reg_664;
reg  signed [7:0] ap_reg_pp0_iter3_E_reg_664;
wire   [15:0] y_1_fu_320_p2;
wire   [7:0] D_fu_325_p2;
reg  signed [7:0] D_reg_675;
wire   [16:0] tmp_12_fu_333_p2;
reg   [16:0] tmp_12_reg_682;
wire  signed [17:0] grp_fu_576_p4;
reg  signed [17:0] tmp_5_reg_687;
reg    ap_enable_reg_pp0_iter3;
wire  signed [16:0] grp_fu_586_p3;
reg  signed [16:0] tmp1_reg_695;
wire   [17:0] tmp_17_fu_367_p2;
reg   [17:0] tmp_17_reg_700;
wire  signed [17:0] grp_fu_593_p3;
reg  signed [17:0] tmp_6_reg_706;
reg    ap_enable_reg_pp0_iter4;
wire   [0:0] icmp_fu_388_p2;
reg   [0:0] icmp_reg_712;
wire   [7:0] G_fu_450_p3;
reg   [7:0] G_reg_718;
wire   [7:0] B_fu_519_p3;
reg   [7:0] B_reg_723;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [15:0] x_phi_fu_215_p4;
reg   [15:0] y_phi_fu_226_p4;
wire   [31:0] tmp_15_cast_fu_527_p1;
wire   [0:0] exitcond_fu_256_p2;
wire   [15:0] x_1_fu_250_p2;
wire   [22:0] p_shl3_cast_fu_292_p3;
wire   [22:0] p_shl2_cast_fu_285_p3;
wire   [22:0] tmp_7_fu_299_p2;
wire   [22:0] tmp_cast_fu_305_p1;
wire  signed [7:0] tmp_12_fu_333_p1;
wire   [16:0] p_shl_fu_345_p3;
wire   [9:0] p_shl1_fu_356_p3;
wire  signed [17:0] p_shl_cast_fu_352_p1;
wire  signed [17:0] p_shl1_cast_fu_363_p1;
wire   [1:0] tmp_8_fu_379_p4;
wire  signed [17:0] tmp1_cast_fu_394_p1;
(* use_dsp48 = "no" *) wire   [17:0] tmp_13_fu_397_p2;
wire   [1:0] tmp_14_fu_402_p4;
wire   [0:0] icmp1_fu_412_p2;
wire   [0:0] tmp_15_fu_418_p3;
wire   [0:0] tmp_16_fu_444_p2;
wire   [7:0] p_phitmp2_fu_436_p3;
wire   [7:0] phitmp2_fu_426_p4;
wire  signed [18:0] tmp_20_cast_fu_376_p1;
wire  signed [18:0] tmp_35_cast_fu_458_p1;
wire   [18:0] tmp_19_fu_465_p2;
wire   [2:0] tmp_20_fu_471_p4;
(* use_dsp48 = "no" *) wire   [17:0] tmp_18_fu_461_p2;
wire   [0:0] icmp2_fu_481_p2;
wire   [0:0] tmp_21_fu_487_p3;
wire   [0:0] tmp_22_fu_513_p2;
wire   [7:0] p_phitmp3_fu_505_p3;
wire   [7:0] phitmp3_fu_495_p4;
wire   [0:0] tmp_9_fu_533_p3;
wire   [0:0] tmp_10_fu_556_p2;
wire   [7:0] p_phitmp_fu_549_p3;
wire   [7:0] phitmp_fu_540_p4;
wire   [15:0] bound_fu_570_p0;
wire   [15:0] bound_fu_570_p1;
wire  signed [4:0] grp_fu_576_p0;
wire   [7:0] grp_fu_576_p1;
wire   [9:0] grp_fu_576_p2;
wire   [8:0] grp_fu_576_p3;
wire  signed [7:0] grp_fu_586_p0;
wire   [9:0] grp_fu_593_p0;
wire    ap_CS_fsm_state10;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] bound_fu_570_p00;
wire   [31:0] bound_fu_570_p10;
wire   [8:0] grp_fu_576_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

yuv_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
yuv_filter_mul_mubkb_x_U36(
    .din0(bound_fu_570_p0),
    .din1(bound_fu_570_p1),
    .dout(bound_fu_570_p2)
);

yuv_filter_ama_adg8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
yuv_filter_ama_adg8j_U37(
    .din0(grp_fu_576_p0),
    .din1(grp_fu_576_p1),
    .din2(grp_fu_576_p2),
    .din3(grp_fu_576_p3),
    .dout(grp_fu_576_p4)
);

yuv_filter_mac_muhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
yuv_filter_mac_muhbi_U38(
    .din0(grp_fu_586_p0),
    .din1(D_reg_675),
    .din2(tmp_12_reg_682),
    .dout(grp_fu_586_p3)
);

yuv_filter_mac_muibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
yuv_filter_mac_muibs_U39(
    .din0(grp_fu_593_p0),
    .din1(ap_reg_pp0_iter3_E_reg_664),
    .din2(tmp_5_reg_687),
    .dout(grp_fu_593_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_239_p2))) begin
        indvar_flatten_reg_200 <= indvar_flatten_next_fu_244_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_200 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_619 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        x_reg_211 <= tmp_mid2_v_reg_634;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_reg_211 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_619 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        y_reg_222 <= y_1_fu_320_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_reg_222 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_619))) begin
        B_reg_723 <= B_fu_519_p3;
        G_reg_718 <= G_fu_450_p3;
        icmp_reg_712 <= icmp_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_619))) begin
        D_reg_675 <= D_fu_325_p2;
        tmp_12_reg_682 <= tmp_12_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_619 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        E_reg_664 <= E_fu_314_p2;
        U_reg_659 <= in_channels_ch2_dout;
        Y_reg_654 <= in_channels_ch1_dout;
        tmp_s_reg_649 <= tmp_s_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_619 <= exitcond_flatten_reg_619;
        exitcond_flatten_reg_619 <= exitcond_flatten_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_E_reg_664 <= E_reg_664;
        ap_reg_pp0_iter2_Y_reg_654 <= Y_reg_654;
        ap_reg_pp0_iter2_exitcond_flatten_reg_619 <= ap_reg_pp0_iter1_exitcond_flatten_reg_619;
        ap_reg_pp0_iter2_tmp_s_reg_649 <= tmp_s_reg_649;
        ap_reg_pp0_iter3_E_reg_664 <= ap_reg_pp0_iter2_E_reg_664;
        ap_reg_pp0_iter3_exitcond_flatten_reg_619 <= ap_reg_pp0_iter2_exitcond_flatten_reg_619;
        ap_reg_pp0_iter3_tmp_s_reg_649 <= ap_reg_pp0_iter2_tmp_s_reg_649;
        ap_reg_pp0_iter4_exitcond_flatten_reg_619 <= ap_reg_pp0_iter3_exitcond_flatten_reg_619;
        ap_reg_pp0_iter4_tmp_s_reg_649 <= ap_reg_pp0_iter3_tmp_s_reg_649;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_614 <= bound_fu_570_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == in_width_empty_n) | (1'b0 == in_height_empty_n)))) begin
        height_reg_607 <= in_height_dout;
        width_reg_601 <= in_width_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_619))) begin
        tmp1_reg_695 <= grp_fu_586_p3;
        tmp_5_reg_687 <= grp_fu_576_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_619))) begin
        tmp_17_reg_700[17 : 2] <= tmp_17_fu_367_p2[17 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_239_p2))) begin
        tmp_1_reg_644 <= tmp_1_fu_281_p1;
        tmp_reg_639 <= tmp_fu_277_p1;
        y_mid2_reg_628 <= y_mid2_fu_261_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_619))) begin
        tmp_6_reg_706 <= grp_fu_593_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_239_p2))) begin
        tmp_mid2_v_reg_634 <= tmp_mid2_v_fu_269_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_239_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_619 == 1'd0))) begin
        in_channels_ch1_blk_n = in_channels_ch1_empty_n;
    end else begin
        in_channels_ch1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_619 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        in_channels_ch1_read = 1'b1;
    end else begin
        in_channels_ch1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_619 == 1'd0))) begin
        in_channels_ch2_blk_n = in_channels_ch2_empty_n;
    end else begin
        in_channels_ch2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_619 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        in_channels_ch2_read = 1'b1;
    end else begin
        in_channels_ch2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_619 == 1'd0))) begin
        in_channels_ch3_blk_n = in_channels_ch3_empty_n;
    end else begin
        in_channels_ch3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_619 == 1'd0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        in_channels_ch3_read = 1'b1;
    end else begin
        in_channels_ch3_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        in_height_blk_n = in_height_empty_n;
    end else begin
        in_height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == in_width_empty_n) | (1'b0 == in_height_empty_n)))) begin
        in_height_read = 1'b1;
    end else begin
        in_height_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        in_width_blk_n = in_width_empty_n;
    end else begin
        in_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == in_width_empty_n) | (1'b0 == in_height_empty_n)))) begin
        in_width_read = 1'b1;
    end else begin
        in_width_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter6)))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_619) & (1'b1 == ap_enable_reg_pp0_iter5))) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter6)))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_619) & (1'b1 == ap_enable_reg_pp0_iter5))) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter6)))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_619) & (1'b1 == ap_enable_reg_pp0_iter5))) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_height_ap_vld = 1'b1;
    end else begin
        out_height_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_width_ap_vld = 1'b1;
    end else begin
        out_width_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_619 == 1'd0))) begin
        x_phi_fu_215_p4 = tmp_mid2_v_reg_634;
    end else begin
        x_phi_fu_215_p4 = x_reg_211;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_619 == 1'd0))) begin
        y_phi_fu_226_p4 = y_1_fu_320_p2;
    end else begin
        y_phi_fu_226_p4 = y_reg_222;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == in_width_empty_n) | (1'b0 == in_height_empty_n)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter6) & (ap_enable_reg_pp0_iter5 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_239_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter6) & (ap_enable_reg_pp0_iter5 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_239_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_fu_519_p3 = ((tmp_22_fu_513_p2[0:0] === 1'b1) ? p_phitmp3_fu_505_p3 : phitmp3_fu_495_p4);

assign D_fu_325_p2 = (U_reg_659 ^ 8'd128);

assign E_fu_314_p2 = (in_channels_ch3_dout ^ 8'd128);

assign G_fu_450_p3 = ((tmp_16_fu_444_p2[0:0] === 1'b1) ? p_phitmp2_fu_436_p3 : phitmp2_fu_426_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_619 == 1'd0) & (1'b0 == in_channels_ch1_empty_n)) | ((exitcond_flatten_reg_619 == 1'd0) & (1'b0 == in_channels_ch2_empty_n)) | ((exitcond_flatten_reg_619 == 1'd0) & (1'b0 == in_channels_ch3_empty_n))));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (((exitcond_flatten_reg_619 == 1'd0) & (1'b0 == in_channels_ch1_empty_n)) | ((exitcond_flatten_reg_619 == 1'd0) & (1'b0 == in_channels_ch2_empty_n)) | ((exitcond_flatten_reg_619 == 1'd0) & (1'b0 == in_channels_ch3_empty_n))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == in_width_empty_n) | (1'b0 == in_height_empty_n));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((exitcond_flatten_reg_619 == 1'd0) & (1'b0 == in_channels_ch1_empty_n)) | ((exitcond_flatten_reg_619 == 1'd0) & (1'b0 == in_channels_ch2_empty_n)) | ((exitcond_flatten_reg_619 == 1'd0) & (1'b0 == in_channels_ch3_empty_n)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_570_p0 = bound_fu_570_p00;

assign bound_fu_570_p00 = height_reg_607;

assign bound_fu_570_p1 = bound_fu_570_p10;

assign bound_fu_570_p10 = width_reg_601;

assign exitcond_flatten_fu_239_p2 = ((indvar_flatten_reg_200 == bound_reg_614) ? 1'b1 : 1'b0);

assign exitcond_fu_256_p2 = ((y_phi_fu_226_p4 == height_reg_607) ? 1'b1 : 1'b0);

assign grp_fu_576_p0 = 9'd496;

assign grp_fu_576_p1 = grp_fu_576_p10;

assign grp_fu_576_p10 = ap_reg_pp0_iter2_Y_reg_654;

assign grp_fu_576_p2 = 18'd298;

assign grp_fu_576_p3 = 18'd128;

assign grp_fu_586_p0 = 16'd65436;

assign grp_fu_593_p0 = 18'd409;

assign icmp1_fu_412_p2 = ((tmp_14_fu_402_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp2_fu_481_p2 = (($signed(tmp_20_fu_471_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_fu_388_p2 = ((tmp_8_fu_379_p4 == 2'd1) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_244_p2 = (indvar_flatten_reg_200 + 32'd1);

assign out_channels_ch1_address0 = tmp_15_cast_fu_527_p1;

assign out_channels_ch1_d0 = ((tmp_10_fu_556_p2[0:0] === 1'b1) ? p_phitmp_fu_549_p3 : phitmp_fu_540_p4);

assign out_channels_ch2_address0 = tmp_15_cast_fu_527_p1;

assign out_channels_ch2_d0 = G_reg_718;

assign out_channels_ch3_address0 = tmp_15_cast_fu_527_p1;

assign out_channels_ch3_d0 = B_reg_723;

assign out_height = height_reg_607;

assign out_width = width_reg_601;

assign p_phitmp2_fu_436_p3 = ((icmp1_fu_412_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign p_phitmp3_fu_505_p3 = ((icmp2_fu_481_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign p_phitmp_fu_549_p3 = ((icmp_reg_712[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign p_shl1_cast_fu_363_p1 = $signed(p_shl1_fu_356_p3);

assign p_shl1_fu_356_p3 = {{D_reg_675}, {2'd0}};

assign p_shl2_cast_fu_285_p3 = {{tmp_reg_639}, {10'd0}};

assign p_shl3_cast_fu_292_p3 = {{tmp_1_reg_644}, {8'd0}};

assign p_shl_cast_fu_352_p1 = $signed(p_shl_fu_345_p3);

assign p_shl_fu_345_p3 = {{D_reg_675}, {9'd0}};

assign phitmp2_fu_426_p4 = {{tmp_13_fu_397_p2[15:8]}};

assign phitmp3_fu_495_p4 = {{tmp_18_fu_461_p2[15:8]}};

assign phitmp_fu_540_p4 = {{tmp_6_reg_706[15:8]}};

assign tmp1_cast_fu_394_p1 = tmp1_reg_695;

assign tmp_10_fu_556_p2 = (icmp_reg_712 | tmp_9_fu_533_p3);

assign tmp_12_fu_333_p1 = E_reg_664;

assign tmp_12_fu_333_p2 = ($signed(17'd130864) * $signed(tmp_12_fu_333_p1));

assign tmp_13_fu_397_p2 = ($signed(tmp1_cast_fu_394_p1) + $signed(tmp_5_reg_687));

assign tmp_14_fu_402_p4 = {{tmp_13_fu_397_p2[17:16]}};

assign tmp_15_cast_fu_527_p1 = ap_reg_pp0_iter4_tmp_s_reg_649;

assign tmp_15_fu_418_p3 = tmp_13_fu_397_p2[32'd17];

assign tmp_16_fu_444_p2 = (icmp1_fu_412_p2 | tmp_15_fu_418_p3);

assign tmp_17_fu_367_p2 = ($signed(p_shl_cast_fu_352_p1) + $signed(p_shl1_cast_fu_363_p1));

assign tmp_18_fu_461_p2 = ($signed(tmp_17_reg_700) + $signed(tmp_5_reg_687));

assign tmp_19_fu_465_p2 = ($signed(tmp_20_cast_fu_376_p1) + $signed(tmp_35_cast_fu_458_p1));

assign tmp_1_fu_281_p1 = tmp_mid2_v_fu_269_p3[14:0];

assign tmp_20_cast_fu_376_p1 = tmp_5_reg_687;

assign tmp_20_fu_471_p4 = {{tmp_19_fu_465_p2[18:16]}};

assign tmp_21_fu_487_p3 = tmp_19_fu_465_p2[32'd18];

assign tmp_22_fu_513_p2 = (icmp2_fu_481_p2 | tmp_21_fu_487_p3);

assign tmp_35_cast_fu_458_p1 = $signed(tmp_17_reg_700);

assign tmp_7_fu_299_p2 = (p_shl3_cast_fu_292_p3 + p_shl2_cast_fu_285_p3);

assign tmp_8_fu_379_p4 = {{grp_fu_593_p3[17:16]}};

assign tmp_9_fu_533_p3 = tmp_6_reg_706[32'd17];

assign tmp_cast_fu_305_p1 = y_mid2_reg_628;

assign tmp_fu_277_p1 = tmp_mid2_v_fu_269_p3[12:0];

assign tmp_mid2_v_fu_269_p3 = ((exitcond_fu_256_p2[0:0] === 1'b1) ? x_1_fu_250_p2 : x_phi_fu_215_p4);

assign tmp_s_fu_308_p2 = (tmp_7_fu_299_p2 + tmp_cast_fu_305_p1);

assign x_1_fu_250_p2 = (16'd1 + x_phi_fu_215_p4);

assign y_1_fu_320_p2 = (16'd1 + y_mid2_reg_628);

assign y_mid2_fu_261_p3 = ((exitcond_fu_256_p2[0:0] === 1'b1) ? 16'd0 : y_phi_fu_226_p4);

always @ (posedge ap_clk) begin
    tmp_17_reg_700[1:0] <= 2'b00;
end

endmodule //yuv2rgb
